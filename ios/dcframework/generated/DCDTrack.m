//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DCDTrack.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(DCDTrack *self, NSString *serverName, NSString *displayNameRes, NSString *textColor, NSString *checkBoxSelector, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(DCDTrack)

DCDTrack *DCDTrack_values_[5];

@implementation DCDTrack

- (NSString *)getServerName {
  return serverName_;
}

- (NSString *)getDisplayNameRes {
  return displayNameRes_;
}

- (NSString *)getCheckBoxSelectorRes {
  return checkBoxSelectorRes_;
}

- (NSString *)getTextColorRes {
  return textColorRes_;
}

+ (DCDTrack *)findByServerNameWithNSString:(NSString *)serverName {
  return DCDTrack_findByServerNameWithNSString_(serverName);
}

+ (IOSObjectArray *)values {
  return DCDTrack_values();
}

+ (DCDTrack *)valueOfWithNSString:(NSString *)name {
  return DCDTrack_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCDTrack;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LDCDTrack;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCDTrack;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getServerName);
  methods[1].selector = @selector(getDisplayNameRes);
  methods[2].selector = @selector(getCheckBoxSelectorRes);
  methods[3].selector = @selector(getTextColorRes);
  methods[4].selector = @selector(findByServerNameWithNSString:);
  methods[5].selector = @selector(values);
  methods[6].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEVELOPMENT", "LDCDTrack;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DESIGN", "LDCDTrack;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "BUSINESS", "LDCDTrack;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "DEVDESIGN", "LDCDTrack;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "DESIGNLAB", "LDCDTrack;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "serverName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "displayNameRes_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "textColorRes_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "checkBoxSelectorRes_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "findByServerName", "LNSString;", "valueOf", &JreEnum(DCDTrack, DEVELOPMENT), &JreEnum(DCDTrack, DESIGN), &JreEnum(DCDTrack, BUSINESS), &JreEnum(DCDTrack, DEVDESIGN), &JreEnum(DCDTrack, DESIGNLAB), "Ljava/lang/Enum<Lco/touchlab/droidconandroid/shared/data/Track;>;" };
  static const J2ObjcClassInfo _DCDTrack = { "Track", "co.touchlab.droidconandroid.shared.data", ptrTable, methods, fields, 7, 0x4011, 7, 9, -1, -1, -1, 8, -1 };
  return &_DCDTrack;
}

+ (void)initialize {
  if (self == [DCDTrack class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(DCDTrack, DEVELOPMENT) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(e, @"Develop", @"development", @"droidcon_blue", @"selector_blue", @"DEVELOPMENT", 0);
    (JreEnum(DCDTrack, DESIGN) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(e, @"Design", @"design", @"droidcon_pink", @"selector_pink", @"DESIGN", 1);
    (JreEnum(DCDTrack, BUSINESS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(e, @"Business", @"business", @"orange", @"selector_orange", @"BUSINESS", 2);
    (JreEnum(DCDTrack, DEVDESIGN) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(e, @"Dev/Design", @"devdesign", @"droidcon_blue", @"selector_blue", @"DEVDESIGN", 3);
    (JreEnum(DCDTrack, DESIGNLAB) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(e, @"Design Lab", @"designlab", @"droidcon_blue", @"selector_blue", @"DESIGNLAB", 4);
    J2OBJC_SET_INITIALIZED(DCDTrack)
  }
}

@end

void DCDTrack_initWithNSString_withNSString_withNSString_withNSString_withNSString_withInt_(DCDTrack *self, NSString *serverName, NSString *displayNameRes, NSString *textColor, NSString *checkBoxSelector, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->serverName_, serverName);
  JreStrongAssign(&self->displayNameRes_, displayNameRes);
  JreStrongAssign(&self->textColorRes_, textColor);
  JreStrongAssign(&self->checkBoxSelectorRes_, checkBoxSelector);
}

DCDTrack *DCDTrack_findByServerNameWithNSString_(NSString *serverName) {
  DCDTrack_initialize();
  {
    IOSObjectArray *a__ = DCDTrack_values();
    DCDTrack * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    DCDTrack * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      DCDTrack *track = *b__++;
      if (AndroidTextTextUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(((DCDTrack *) nil_chk(track))->serverName_, serverName)) {
        return track;
      }
    }
  }
  return nil;
}

IOSObjectArray *DCDTrack_values() {
  DCDTrack_initialize();
  return [IOSObjectArray arrayWithObjects:DCDTrack_values_ count:5 type:DCDTrack_class_()];
}

DCDTrack *DCDTrack_valueOfWithNSString_(NSString *name) {
  DCDTrack_initialize();
  for (int i = 0; i < 5; i++) {
    DCDTrack *e = DCDTrack_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

DCDTrack *DCDTrack_fromOrdinal(NSUInteger ordinal) {
  DCDTrack_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return DCDTrack_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCDTrack)
