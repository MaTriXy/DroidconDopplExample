//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/temp/DroidconAppSimple/lib/src/main/java/co/touchlab/droidconandroid/tasks/EventDetailLoadTask.java
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingEventbusEventBusExt.h"
#include "CoTouchlabAndroidThreadingTasksTask.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "DCDDatabaseHelper.h"
#include "DCDEvent.h"
#include "DCDEventSpeaker.h"
#include "DCDUserAccount.h"
#include "DCTEventDetailLoadTask.h"
#include "DeGreenrobotEventEventBus.h"
#include "J2ObjC_source.h"
#include "android/text/TextUtils.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation DCTEventDetailLoadTask

- (instancetype)initWithLong:(jlong)eventId {
  DCTEventDetailLoadTask_initWithLong_(self, eventId);
  return self;
}

- (void)runWithAndroidContentContext:(AndroidContentContext *)context {
  id<CoTouchlabSqueakyDaoDao> dao = [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context))) getEventDao];
  JreStrongAssign(&event_, [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForIdWithId:JavaLangLong_valueOfWithLong_(eventId_)]);
  if ([((DCDEvent *) nil_chk(event_)) isRsvped]) conflict_ = DCTEventDetailLoadTask_hasConflictWithDCDEvent_withJavaUtilList_(event_, [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list]);
  id<CoTouchlabSqueakyDaoDao> eventSpeakerDao = [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context))) getEventSpeakerDao];
  id<JavaUtilList> results = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(eventSpeakerDao)) queryForEqWithNSString:@"event_id" withId:JavaLangLong_valueOfWithLong_(eventId_)])) list];
  JreStrongAssignAndConsume(&speakers_, new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(results)) size]));
  for (DCDEventSpeaker * __strong eventSpeaker in results) {
    [((id<JavaUtilList>) nil_chk(speakers_)) addWithId:((DCDEventSpeaker *) nil_chk(eventSpeaker))->userAccount_];
  }
  JreStrongAssign(&((DCDEvent *) nil_chk(event_))->speakerList_, results);
}

- (jlong)getEventId {
  return eventId_;
}

- (DCDEvent *)getEvent {
  return event_;
}

- (jboolean)isConflict {
  return conflict_;
}

- (id<JavaUtilList>)getSpeakers {
  return speakers_;
}

- (jboolean)handleErrorWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSException:(NSException *)e {
  return false;
}

- (void)onCompleteWithAndroidContentContext:(AndroidContentContext *)context {
  [((DeGreenrobotEventEventBus *) nil_chk(CoTouchlabAndroidThreadingEventbusEventBusExt_getDefault())) postWithId:self];
}

+ (jboolean)hasConflictWithDCDEvent:(DCDEvent *)event
                   withJavaUtilList:(id<JavaUtilList>)dataSet {
  return DCTEventDetailLoadTask_hasConflictWithDCDEvent_withJavaUtilList_(event, dataSet);
}

- (void)dealloc {
  RELEASE_(event_);
  RELEASE_(speakers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCDEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(runWithAndroidContentContext:);
  methods[2].selector = @selector(getEventId);
  methods[3].selector = @selector(getEvent);
  methods[4].selector = @selector(isConflict);
  methods[5].selector = @selector(getSpeakers);
  methods[6].selector = @selector(handleErrorWithAndroidContentContext:withNSException:);
  methods[7].selector = @selector(onCompleteWithAndroidContentContext:);
  methods[8].selector = @selector(hasConflictWithDCDEvent:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventId_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "event_", "LDCDEvent;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "conflict_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "speakers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "J", "run", "LAndroidContentContext;", "LNSException;", "()Ljava/util/List<Lco/touchlab/droidconandroid/data/UserAccount;>;", "handleError", "LAndroidContentContext;LNSException;", "onComplete", "hasConflict", "LDCDEvent;LJavaUtilList;", "Ljava/util/List<Lco/touchlab/droidconandroid/data/UserAccount;>;" };
  static const J2ObjcClassInfo _DCTEventDetailLoadTask = { "EventDetailLoadTask", "co.touchlab.droidconandroid.tasks", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_DCTEventDetailLoadTask;
}

@end

void DCTEventDetailLoadTask_initWithLong_(DCTEventDetailLoadTask *self, jlong eventId) {
  CoTouchlabAndroidThreadingTasksTask_init(self);
  self->eventId_ = eventId;
}

DCTEventDetailLoadTask *new_DCTEventDetailLoadTask_initWithLong_(jlong eventId) {
  J2OBJC_NEW_IMPL(DCTEventDetailLoadTask, initWithLong_, eventId)
}

DCTEventDetailLoadTask *create_DCTEventDetailLoadTask_initWithLong_(jlong eventId) {
  J2OBJC_CREATE_IMPL(DCTEventDetailLoadTask, initWithLong_, eventId)
}

jboolean DCTEventDetailLoadTask_hasConflictWithDCDEvent_withJavaUtilList_(DCDEvent *event, id<JavaUtilList> dataSet) {
  DCTEventDetailLoadTask_initialize();
  for (id __strong ce in nil_chk(dataSet)) {
    if ([ce isKindOfClass:[DCDEvent class]]) {
      DCDEvent *cee = (DCDEvent *) cast_chk(ce, [DCDEvent class]);
      if (((DCDEvent *) nil_chk(event))->id__ != ((DCDEvent *) nil_chk(cee))->id__ && !AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(cee->rsvpUuid_) && [((JavaLangLong *) nil_chk(event->startDateLong_)) longLongValue] < [((JavaLangLong *) nil_chk(cee->endDateLong_)) longLongValue] && [event->endDateLong_ longLongValue] > [cee->startDateLong_ longLongValue]) return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCTEventDetailLoadTask)
