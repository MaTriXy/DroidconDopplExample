//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingEventbusEventBusExt.h"
#include "CoTouchlabAndroidThreadingTasksHelperRetrofitPersistedTask.h"
#include "CoTouchlabAndroidThreadingTasksPersistedPersistedTask.h"
#include "CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue.h"
#include "CoTouchlabDroidconandroidCrashReport.h"
#include "CoTouchlabDroidconandroidSharedNetworkDaoBlock.h"
#include "CoTouchlabDroidconandroidSharedNetworkDaoConvention.h"
#include "CoTouchlabDroidconandroidSharedNetworkDaoEvent.h"
#include "CoTouchlabDroidconandroidSharedNetworkDaoUserAccount.h"
#include "CoTouchlabDroidconandroidSharedNetworkDaoVenue.h"
#include "CoTouchlabDroidconandroidSharedNetworkDataHelper.h"
#include "CoTouchlabDroidconandroidSharedNetworkRefreshScheduleDataRequest.h"
#include "CoTouchlabDroidconandroidSharedTasksPersistedPersistedTaskQueueFactory.h"
#include "CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData.h"
#include "CoTouchlabDroidconandroidSharedUtilsStringUtils.h"
#include "CoTouchlabDroidconandroidSharedUtilsTimeUtils.h"
#include "CoTouchlabDroidconandroidSharedUtilsUserDataHelper.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyStmtQueryManyClause.h"
#include "CoTouchlabSqueakyStmtWhere.h"
#include "DCDAppPrefs.h"
#include "DCDDatabaseHelper.h"
#include "DCDEvent.h"
#include "DCDEventSpeaker.h"
#include "DCDUserAccount.h"
#include "DCDVenue.h"
#include "DCPAppManager.h"
#include "DCPPlatformClient.h"
#include "DeGreenrobotEventEventBus.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RetrofitRestAdapter.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Void.h"
#include "java/sql/SQLException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"

@interface CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  DCDDatabaseHelper *val$databaseHelper_;
  AndroidContentContext *val$context_;
  CoTouchlabDroidconandroidSharedNetworkDaoConvention *val$convention_;
}

- (instancetype)initWithDCDDatabaseHelper:(DCDDatabaseHelper *)capture$0
                withAndroidContentContext:(AndroidContentContext *)capture$1
withCoTouchlabDroidconandroidSharedNetworkDaoConvention:(CoTouchlabDroidconandroidSharedNetworkDaoConvention *)capture$2;

- (JavaLangVoid *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1)

__attribute__((unused)) static void CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *self, DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2);

__attribute__((unused)) static CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *new_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *create_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2);

@implementation CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)callMeWithAndroidContentContext:(AndroidContentContext *)c {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_callMeWithAndroidContentContext_(c);
}

- (void)runNetworkWithAndroidContentContext:(AndroidContentContext *)context {
  id<DCPPlatformClient> platformClient = DCPAppManager_getPlatformClient();
  RetrofitRestAdapter *restAdapter = CoTouchlabDroidconandroidSharedNetworkDataHelper_makeRequestAdapterWithAndroidContentContext_withDCPPlatformClient_(context, platformClient);
  id<CoTouchlabDroidconandroidSharedNetworkRefreshScheduleDataRequest> request = [((RetrofitRestAdapter *) nil_chk(restAdapter)) createWithIOSClass:CoTouchlabDroidconandroidSharedNetworkRefreshScheduleDataRequest_class_()];
  CoTouchlabDroidconandroidSharedNetworkDaoConvention *convention = [((id<CoTouchlabDroidconandroidSharedNetworkRefreshScheduleDataRequest>) nil_chk(request)) getScheduleDataWithJavaLangInteger:[((id<DCPPlatformClient>) nil_chk(platformClient)) getConventionId]];
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_saveConventionDataWithAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(context, convention);
  [((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_(context))) setRefreshTimeWithLong:JavaLangSystem_currentTimeMillis()];
}

- (jboolean)handleErrorWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSException:(NSException *)e {
  CoTouchlabDroidconandroidCrashReport_logExceptionWithNSException_(e);
  return true;
}

- (NSString *)logSummary {
  return [[self java_getClass] getSimpleName];
}

- (jboolean)sameWithCoTouchlabAndroidThreadingTasksPersistedPersistedTask:(CoTouchlabAndroidThreadingTasksPersistedPersistedTask *)persistedTask {
  return [persistedTask isKindOfClass:[CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData class]];
}

- (void)onCompleteWithAndroidContentContext:(AndroidContentContext *)context {
  [((DeGreenrobotEventEventBus *) nil_chk(CoTouchlabAndroidThreadingEventbusEventBusExt_getDefault())) postWithId:self];
}

+ (void)saveConventionDataWithAndroidContentContext:(AndroidContentContext *)context
withCoTouchlabDroidconandroidSharedNetworkDaoConvention:(CoTouchlabDroidconandroidSharedNetworkDaoConvention *)convention {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_saveConventionDataWithAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(context, convention);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callMeWithAndroidContentContext:);
  methods[2].selector = @selector(runNetworkWithAndroidContentContext:);
  methods[3].selector = @selector(handleErrorWithAndroidContentContext:withNSException:);
  methods[4].selector = @selector(logSummary);
  methods[5].selector = @selector(sameWithCoTouchlabAndroidThreadingTasksPersistedPersistedTask:);
  methods[6].selector = @selector(onCompleteWithAndroidContentContext:);
  methods[7].selector = @selector(saveConventionDataWithAndroidContentContext:withCoTouchlabDroidconandroidSharedNetworkDaoConvention:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "callMe", "LAndroidContentContext;", "runNetwork", "handleError", "LAndroidContentContext;LNSException;", "same", "LCoTouchlabAndroidThreadingTasksPersistedPersistedTask;", "onComplete", "saveConventionData", "LAndroidContentContext;LCoTouchlabDroidconandroidSharedNetworkDaoConvention;" };
  static const J2ObjcClassInfo _CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData = { "RefreshScheduleData", "co.touchlab.droidconandroid.shared.tasks.persisted", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData;
}

@end

void CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_init(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData *self) {
  CoTouchlabAndroidThreadingTasksHelperRetrofitPersistedTask_init(self);
}

CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData *new_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_init() {
  J2OBJC_NEW_IMPL(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData, init)
}

CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData *create_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData, init)
}

void CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_callMeWithAndroidContentContext_(AndroidContentContext *c) {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_initialize();
  [((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue *) nil_chk(CoTouchlabDroidconandroidSharedTasksPersistedPersistedTaskQueueFactory_getInstanceWithAndroidContentContext_(c))) executeWithCoTouchlabAndroidThreadingTasksPersistedPersistedTask:create_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_init()];
}

void CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_saveConventionDataWithAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(AndroidContentContext *context, CoTouchlabDroidconandroidSharedNetworkDaoConvention *convention) {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_initialize();
  if (convention == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"No convention results");
  DCDDatabaseHelper *databaseHelper = DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context);
  [((DCDDatabaseHelper *) nil_chk(databaseHelper)) performTransactionOrThrowRuntimeWithJavaUtilConcurrentCallable:create_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(databaseHelper, context, convention)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData)

@implementation CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1

- (instancetype)initWithDCDDatabaseHelper:(DCDDatabaseHelper *)capture$0
                withAndroidContentContext:(AndroidContentContext *)capture$1
withCoTouchlabDroidconandroidSharedNetworkDaoConvention:(CoTouchlabDroidconandroidSharedNetworkDaoConvention *)capture$2 {
  CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(self, capture$0, capture$1, capture$2);
  return self;
}

- (JavaLangVoid *)call {
  id<CoTouchlabSqueakyDaoDao> eventDao = [((DCDDatabaseHelper *) nil_chk(val$databaseHelper_)) getEventDao];
  id<CoTouchlabSqueakyDaoDao> venueDao = [val$databaseHelper_ getVenueDao];
  id<CoTouchlabSqueakyDaoDao> blockDao = [val$databaseHelper_ getBlockDao];
  id<CoTouchlabSqueakyDaoDao> userAccountDao = [val$databaseHelper_ getUserAccountDao];
  id<CoTouchlabSqueakyDaoDao> eventSpeakerDao = [val$databaseHelper_ getEventSpeakerDao];
  [((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_(val$context_))) setConventionStartDateWithNSString:((CoTouchlabDroidconandroidSharedNetworkDaoConvention *) nil_chk(val$convention_))->startDate_];
  [((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_(val$context_))) setConventionEndDateWithNSString:val$convention_->endDate_];
  id<JavaUtilList> venues = val$convention_->venues_;
  id<JavaUtilList> blocks = val$convention_->blocks_;
  id<JavaUtilSet> foundEvents = create_JavaUtilHashSet_init();
  @try {
    for (CoTouchlabDroidconandroidSharedNetworkDaoVenue * __strong venue in nil_chk(venues)) {
      [((id<CoTouchlabSqueakyDaoDao>) nil_chk(venueDao)) createOrUpdateWithId:venue];
      id<JavaUtilIterator> venueEventsIterator = [((id<JavaUtilList>) nil_chk(((CoTouchlabDroidconandroidSharedNetworkDaoVenue *) nil_chk(venue))->events_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(venueEventsIterator)) hasNext]) {
        CoTouchlabDroidconandroidSharedNetworkDaoEvent *event = [venueEventsIterator next];
        [foundEvents addWithId:JavaLangLong_valueOfWithLong_(((CoTouchlabDroidconandroidSharedNetworkDaoEvent *) nil_chk(event))->id__)];
        DCDEvent *dbEvent = [((id<CoTouchlabSqueakyDaoDao>) nil_chk(eventDao)) queryForIdWithId:JavaLangLong_valueOfWithLong_(event->id__)];
        JreStrongAssign(&event->venue_, venue);
        if (CoTouchlabDroidconandroidSharedUtilsStringUtils_isEmptyWithNSString_(event->startDate_) || CoTouchlabDroidconandroidSharedUtilsStringUtils_isEmptyWithNSString_(event->endDate_)) continue;
        JreStrongAssign(&event->startDateLong_, JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CoTouchlabDroidconandroidSharedUtilsTimeUtils, DATE_FORMAT))) get])) parseWithNSString:event->startDate_])) getTime]));
        JreStrongAssign(&event->endDateLong_, JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CoTouchlabDroidconandroidSharedUtilsTimeUtils, DATE_FORMAT))) get])) parseWithNSString:event->endDate_])) getTime]));
        if (dbEvent != nil) JreStrongAssign(&event->rsvpUuid_, dbEvent->rsvpUuid_);
        [eventDao createOrUpdateWithId:event];
        id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(event->speakers_)) iterator];
        jint speakerCount = 0;
        while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
          CoTouchlabDroidconandroidSharedNetworkDaoUserAccount *ua = [iterator next];
          DCDUserAccount *userAccount = [((id<CoTouchlabSqueakyDaoDao>) nil_chk(userAccountDao)) queryForIdWithId:((CoTouchlabDroidconandroidSharedNetworkDaoUserAccount *) nil_chk(ua))->id__];
          if (userAccount == nil) {
            userAccount = create_DCDUserAccount_init();
          }
          CoTouchlabDroidconandroidSharedUtilsUserDataHelper_userAccountToDbWithCoTouchlabDroidconandroidSharedNetworkDaoUserAccount_withDCDUserAccount_(ua, userAccount);
          [userAccountDao createOrUpdateWithId:userAccount];
          id<JavaUtilList> resultList = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((CoTouchlabSqueakyStmtQueryManyClause *) nil_chk([((CoTouchlabSqueakyStmtQueryManyClause *) nil_chk([((CoTouchlabSqueakyStmtQueryManyClause *) nil_chk([create_CoTouchlabSqueakyStmtWhere_initWithCoTouchlabSqueakyDaoDao_(eventSpeakerDao) and__])) eqWithNSString:@"event_id" withId:JavaLangLong_valueOfWithLong_(event->id__)])) eqWithNSString:@"userAccount_id" withId:userAccount->id__])) query])) list];
          DCDEventSpeaker *eventSpeaker = (([((id<JavaUtilList>) nil_chk(resultList)) size] == 0) ? create_DCDEventSpeaker_init() : [resultList getWithInt:0]);
          JreStrongAssign(&eventSpeaker->event_, event);
          JreStrongAssign(&eventSpeaker->userAccount_, userAccount);
          eventSpeaker->displayOrder_ = speakerCount++;
          [((id<CoTouchlabSqueakyDaoDao>) nil_chk(eventSpeakerDao)) createOrUpdateWithId:eventSpeaker];
        }
      }
    }
    if (![foundEvents isEmpty]) {
      [val$databaseHelper_ deleteEventsNotInWithJavaUtilSet:foundEvents];
    }
    if ([((id<JavaUtilList>) nil_chk(blocks)) size] > 0) {
      [((id<CoTouchlabSqueakyDaoDao>) nil_chk(blockDao)) delete__WithJavaUtilCollection:[((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([blockDao queryForAll])) list]];
      for (CoTouchlabDroidconandroidSharedNetworkDaoBlock * __strong block in blocks) {
        JreStrongAssign(&((CoTouchlabDroidconandroidSharedNetworkDaoBlock *) nil_chk(block))->startDateLong_, JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CoTouchlabDroidconandroidSharedUtilsTimeUtils, DATE_FORMAT))) get])) parseWithNSString:block->startDate_])) getTime]));
        JreStrongAssign(&block->endDateLong_, JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk([((JavaTextDateFormat *) nil_chk([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(CoTouchlabDroidconandroidSharedUtilsTimeUtils, DATE_FORMAT))) get])) parseWithNSString:block->endDate_])) getTime]));
        [blockDao createOrUpdateWithId:block];
      }
    }
  }
  @catch (JavaSqlSQLException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  @catch (JavaTextParseException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(val$databaseHelper_);
  RELEASE_(val$context_);
  RELEASE_(val$convention_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDCDDatabaseHelper:withAndroidContentContext:withCoTouchlabDroidconandroidSharedNetworkDaoConvention:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$databaseHelper_", "LDCDDatabaseHelper;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$convention_", "LCoTouchlabDroidconandroidSharedNetworkDaoConvention;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LCoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData;", "saveConventionDataWithAndroidContentContext:withCoTouchlabDroidconandroidSharedNetworkDaoConvention:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 = { "", "co.touchlab.droidconandroid.shared.tasks.persisted", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, 3, -1 };
  return &_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1;
}

@end

void CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *self, DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2) {
  JreStrongAssign(&self->val$databaseHelper_, capture$0);
  JreStrongAssign(&self->val$context_, capture$1);
  JreStrongAssign(&self->val$convention_, capture$2);
  NSObject_init(self);
}

CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *new_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2) {
  J2OBJC_NEW_IMPL(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1, initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_, capture$0, capture$1, capture$2)
}

CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1 *create_CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1_initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_(DCDDatabaseHelper *capture$0, AndroidContentContext *capture$1, CoTouchlabDroidconandroidSharedNetworkDaoConvention *capture$2) {
  J2OBJC_CREATE_IMPL(CoTouchlabDroidconandroidSharedTasksPersistedRefreshScheduleData_1, initWithDCDDatabaseHelper_withAndroidContentContext_withCoTouchlabDroidconandroidSharedNetworkDaoConvention_, capture$0, capture$1, capture$2)
}
