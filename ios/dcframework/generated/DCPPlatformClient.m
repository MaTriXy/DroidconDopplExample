//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "DCPPlatformClient.h"
#include "J2ObjC_source.h"

@interface DCPPlatformClient : NSObject

@end

@implementation DCPPlatformClient

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRetrofitClientClient;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(makeClient);
  methods[1].selector = @selector(baseUrl);
  methods[2].selector = @selector(getConventionId);
  methods[3].selector = @selector(logWithNSString:);
  methods[4].selector = @selector(logExceptionWithNSException:);
  methods[5].selector = @selector(logEventWithNSString:withNSStringArray:);
  methods[6].selector = @selector(getStringWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "log", "LNSString;", "logException", "LNSException;", "logEvent", "LNSString;[LNSString;", "getString" };
  static const J2ObjcClassInfo _DCPPlatformClient = { "PlatformClient", "co.touchlab.droidconandroid.shared.presenter", ptrTable, methods, NULL, 7, 0x609, 7, 0, -1, -1, -1, -1, -1 };
  return &_DCPPlatformClient;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DCPPlatformClient)
