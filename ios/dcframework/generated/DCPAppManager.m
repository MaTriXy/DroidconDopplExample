//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/DroidconDopplExample/lib/src/main/java/co/touchlab/droidconandroid/presenter/AppManager.java
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingTasksTaskQueue.h"
#include "DCDAppPrefs.h"
#include "DCPAppManager.h"
#include "DCPPlatformClient.h"
#include "DCTSeedScheduleDataTask.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

inline AndroidContentContext *DCPAppManager_get_context();
inline AndroidContentContext *DCPAppManager_set_context(AndroidContentContext *value);
static AndroidContentContext *DCPAppManager_context;
J2OBJC_STATIC_FIELD_OBJ(DCPAppManager, context, AndroidContentContext *)

inline id<DCPPlatformClient> DCPAppManager_get_platformClient();
inline id<DCPPlatformClient> DCPAppManager_set_platformClient(id<DCPPlatformClient> value);
static id<DCPPlatformClient> DCPAppManager_platformClient;
J2OBJC_STATIC_FIELD_OBJ(DCPAppManager, platformClient, id<DCPPlatformClient>)

@interface DCPAppManager_LoadDataSeed : NSObject

@end

__attribute__((unused)) static void DCPAppManager_AppScreens_initWithNSString_withInt_(DCPAppManager_AppScreens *self, NSString *__name, jint __ordinal);

NSString *DCPAppManager_FIRST_SEED = @"FIRST_SEED";

@implementation DCPAppManager

+ (void)initContextWithAndroidContentContext:(AndroidContentContext *)context
                       withDCPPlatformClient:(id<DCPPlatformClient>)platformClient
              withDCPAppManager_LoadDataSeed:(id<DCPAppManager_LoadDataSeed>)loadDataSeed {
  DCPAppManager_initContextWithAndroidContentContext_withDCPPlatformClient_withDCPAppManager_LoadDataSeed_(context, platformClient, loadDataSeed);
}

+ (AndroidContentContext *)getContext {
  return DCPAppManager_getContext();
}

+ (id<DCPPlatformClient>)getPlatformClient {
  return DCPAppManager_getPlatformClient();
}

+ (DCPAppManager_AppScreens *)findStartScreen {
  return DCPAppManager_findStartScreen();
}

+ (DCDAppPrefs *)getAppPrefs {
  return DCPAppManager_getAppPrefs();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DCPAppManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentContext;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCPPlatformClient;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCPAppManager_AppScreens;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCDAppPrefs;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initContextWithAndroidContentContext:withDCPPlatformClient:withDCPAppManager_LoadDataSeed:);
  methods[1].selector = @selector(getContext);
  methods[2].selector = @selector(getPlatformClient);
  methods[3].selector = @selector(findStartScreen);
  methods[4].selector = @selector(getAppPrefs);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIRST_SEED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "context", "LAndroidContentContext;", .constantValue.asLong = 0, 0xa, -1, 3, -1, -1 },
    { "platformClient", "LDCPPlatformClient;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "initContext", "LAndroidContentContext;LDCPPlatformClient;LDCPAppManager_LoadDataSeed;", &DCPAppManager_FIRST_SEED, &DCPAppManager_context, &DCPAppManager_platformClient, "LDCPAppManager_LoadDataSeed;LDCPAppManager_AppScreens;" };
  static const J2ObjcClassInfo _DCPAppManager = { "AppManager", "co.touchlab.droidconandroid.presenter", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, 5, -1, -1, -1 };
  return &_DCPAppManager;
}

@end

void DCPAppManager_initContextWithAndroidContentContext_withDCPPlatformClient_withDCPAppManager_LoadDataSeed_(AndroidContentContext *context, id<DCPPlatformClient> platformClient, id<DCPAppManager_LoadDataSeed> loadDataSeed) {
  DCPAppManager_initialize();
  JreStrongAssign(&DCPAppManager_context, context);
  JreStrongAssign(&DCPAppManager_platformClient, platformClient);
  if ([((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_(context))) onceWithNSString:DCPAppManager_FIRST_SEED]) {
    NSString *seed = [((id<DCPAppManager_LoadDataSeed>) nil_chk(loadDataSeed)) dataSeed];
    [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_(context))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTSeedScheduleDataTask_initWithNSString_(seed)];
  }
}

AndroidContentContext *DCPAppManager_getContext() {
  DCPAppManager_initialize();
  return DCPAppManager_context;
}

id<DCPPlatformClient> DCPAppManager_getPlatformClient() {
  DCPAppManager_initialize();
  return DCPAppManager_platformClient;
}

DCPAppManager_AppScreens *DCPAppManager_findStartScreen() {
  DCPAppManager_initialize();
  DCDAppPrefs *appPrefs = DCDAppPrefs_getInstanceWithAndroidContentContext_(DCPAppManager_context);
  jboolean hasSeenWelcome = [((DCDAppPrefs *) nil_chk(appPrefs)) getHasSeenWelcome];
  if (!hasSeenWelcome) {
    return JreLoadEnum(DCPAppManager_AppScreens, Welcome);
  }
  else {
    return JreLoadEnum(DCPAppManager_AppScreens, Schedule);
  }
}

DCDAppPrefs *DCPAppManager_getAppPrefs() {
  DCPAppManager_initialize();
  return DCDAppPrefs_getInstanceWithAndroidContentContext_(DCPAppManager_context);
}

void DCPAppManager_init(DCPAppManager *self) {
  NSObject_init(self);
}

DCPAppManager *new_DCPAppManager_init() {
  J2OBJC_NEW_IMPL(DCPAppManager, init)
}

DCPAppManager *create_DCPAppManager_init() {
  J2OBJC_CREATE_IMPL(DCPAppManager, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCPAppManager)

@implementation DCPAppManager_LoadDataSeed

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(dataSeed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LDCPAppManager;" };
  static const J2ObjcClassInfo _DCPAppManager_LoadDataSeed = { "LoadDataSeed", "co.touchlab.droidconandroid.presenter", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_DCPAppManager_LoadDataSeed;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DCPAppManager_LoadDataSeed)

J2OBJC_INITIALIZED_DEFN(DCPAppManager_AppScreens)

DCPAppManager_AppScreens *DCPAppManager_AppScreens_values_[2];

@implementation DCPAppManager_AppScreens

+ (IOSObjectArray *)values {
  return DCPAppManager_AppScreens_values();
}

+ (DCPAppManager_AppScreens *)valueOfWithNSString:(NSString *)name {
  return DCPAppManager_AppScreens_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LDCPAppManager_AppScreens;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCPAppManager_AppScreens;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Welcome", "LDCPAppManager_AppScreens;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Schedule", "LDCPAppManager_AppScreens;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(DCPAppManager_AppScreens, Welcome), &JreEnum(DCPAppManager_AppScreens, Schedule), "LDCPAppManager;", "Ljava/lang/Enum<Lco/touchlab/droidconandroid/presenter/AppManager$AppScreens;>;" };
  static const J2ObjcClassInfo _DCPAppManager_AppScreens = { "AppScreens", "co.touchlab.droidconandroid.presenter", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_DCPAppManager_AppScreens;
}

+ (void)initialize {
  if (self == [DCPAppManager_AppScreens class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"Welcome", @"Schedule",
    };
    for (jint i = 0; i < 2; i++) {
      (DCPAppManager_AppScreens_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      DCPAppManager_AppScreens_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(DCPAppManager_AppScreens)
  }
}

@end

void DCPAppManager_AppScreens_initWithNSString_withInt_(DCPAppManager_AppScreens *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *DCPAppManager_AppScreens_values() {
  DCPAppManager_AppScreens_initialize();
  return [IOSObjectArray arrayWithObjects:DCPAppManager_AppScreens_values_ count:2 type:DCPAppManager_AppScreens_class_()];
}

DCPAppManager_AppScreens *DCPAppManager_AppScreens_valueOfWithNSString_(NSString *name) {
  DCPAppManager_AppScreens_initialize();
  for (int i = 0; i < 2; i++) {
    DCPAppManager_AppScreens *e = DCPAppManager_AppScreens_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

DCPAppManager_AppScreens *DCPAppManager_AppScreens_fromOrdinal(NSUInteger ordinal) {
  DCPAppManager_AppScreens_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return DCPAppManager_AppScreens_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCPAppManager_AppScreens)
