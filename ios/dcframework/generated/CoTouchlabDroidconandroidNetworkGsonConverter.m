//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/DroidconDopplExample/lib/src/main/java/co/touchlab/droidconandroid/network/GsonConverter.java
//

#include "CoTouchlabDroidconandroidNetworkGsonConverter.h"
#include "CoTouchlabDroidconandroidUtilsIOUtils.h"
#include "ComGoogleGsonGson.h"
#include "ComGoogleGsonJsonParseException.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RetrofitConverterConversionException.h"
#include "RetrofitMimeMimeUtil.h"
#include "RetrofitMimeTypedInput.h"
#include "RetrofitMimeTypedOutput.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/reflect/Type.h"

@interface CoTouchlabDroidconandroidNetworkGsonConverter () {
 @public
  ComGoogleGsonGson *gson_;
  NSString *encoding_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabDroidconandroidNetworkGsonConverter, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(CoTouchlabDroidconandroidNetworkGsonConverter, encoding_, NSString *)

@interface CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput : NSObject < RetrofitMimeTypedOutput > {
 @public
  IOSByteArray *jsonBytes_;
  NSString *mimeType_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)jsonBytes
                     withNSString:(NSString *)encode;

- (NSString *)fileName;

- (NSString *)mimeType;

- (jlong)length;

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput)

J2OBJC_FIELD_SETTER(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput, jsonBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput, mimeType_, NSString *)

__attribute__((unused)) static void CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *self, IOSByteArray *jsonBytes, NSString *encode);

__attribute__((unused)) static CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *new_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *create_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput)

@implementation CoTouchlabDroidconandroidNetworkGsonConverter

- (instancetype)initWithComGoogleGsonGson:(ComGoogleGsonGson *)gson {
  CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_(self, gson);
  return self;
}

- (instancetype)initWithComGoogleGsonGson:(ComGoogleGsonGson *)gson
                             withNSString:(NSString *)encoding {
  CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_withNSString_(self, gson, encoding);
  return self;
}

- (id)fromBodyWithRetrofitMimeTypedInput:(id<RetrofitMimeTypedInput>)body
                 withJavaLangReflectType:(id<JavaLangReflectType>)type {
  NSString *charset = @"UTF-8";
  if ([((id<RetrofitMimeTypedInput>) nil_chk(body)) mimeType] != nil) {
    charset = RetrofitMimeMimeUtil_parseCharsetWithNSString_([body mimeType]);
  }
  JavaIoInputStreamReader *isr = nil;
  @try {
    JavaIoInputStream *in = [body in];
    IOSByteArray *bytes = CoTouchlabDroidconandroidUtilsIOUtils_toByteArrayWithJavaIoInputStream_(in);
    isr = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoByteArrayInputStream_initWithByteArray_(bytes), charset);
    return [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:isr withJavaLangReflectType:type];
  }
  @catch (JavaIoIOException *e) {
    @throw create_RetrofitConverterConversionException_initWithNSException_(e);
  }
  @catch (ComGoogleGsonJsonParseException *e) {
    @throw create_RetrofitConverterConversionException_initWithNSException_(e);
  }
  @finally {
    if (isr != nil) {
      @try {
        [isr close];
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
  }
}

- (id<RetrofitMimeTypedOutput>)toBodyWithId:(id)object {
  @try {
    return create_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_([((NSString *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:object])) getBytesWithCharsetName:encoding_], encoding_);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

- (void)dealloc {
  RELEASE_(gson_);
  RELEASE_(encoding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LRetrofitMimeTypedOutput;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleGsonGson:);
  methods[1].selector = @selector(initWithComGoogleGsonGson:withNSString:);
  methods[2].selector = @selector(fromBodyWithRetrofitMimeTypedInput:withJavaLangReflectType:);
  methods[3].selector = @selector(toBodyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", "LComGoogleGsonGson;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonGson;", "LComGoogleGsonGson;LNSString;", "fromBody", "LRetrofitMimeTypedInput;LJavaLangReflectType;", "LRetrofitConverterConversionException;", "toBody", "LNSObject;", "LCoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput;" };
  static const J2ObjcClassInfo _CoTouchlabDroidconandroidNetworkGsonConverter = { "GsonConverter", "co.touchlab.droidconandroid.network", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, 7, -1, -1, -1 };
  return &_CoTouchlabDroidconandroidNetworkGsonConverter;
}

@end

void CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_(CoTouchlabDroidconandroidNetworkGsonConverter *self, ComGoogleGsonGson *gson) {
  CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_withNSString_(self, gson, @"UTF-8");
}

CoTouchlabDroidconandroidNetworkGsonConverter *new_CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_(ComGoogleGsonGson *gson) {
  J2OBJC_NEW_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter, initWithComGoogleGsonGson_, gson)
}

CoTouchlabDroidconandroidNetworkGsonConverter *create_CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_(ComGoogleGsonGson *gson) {
  J2OBJC_CREATE_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter, initWithComGoogleGsonGson_, gson)
}

void CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_withNSString_(CoTouchlabDroidconandroidNetworkGsonConverter *self, ComGoogleGsonGson *gson, NSString *encoding) {
  NSObject_init(self);
  JreStrongAssign(&self->gson_, gson);
  JreStrongAssign(&self->encoding_, encoding);
}

CoTouchlabDroidconandroidNetworkGsonConverter *new_CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_withNSString_(ComGoogleGsonGson *gson, NSString *encoding) {
  J2OBJC_NEW_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter, initWithComGoogleGsonGson_withNSString_, gson, encoding)
}

CoTouchlabDroidconandroidNetworkGsonConverter *create_CoTouchlabDroidconandroidNetworkGsonConverter_initWithComGoogleGsonGson_withNSString_(ComGoogleGsonGson *gson, NSString *encoding) {
  J2OBJC_CREATE_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter, initWithComGoogleGsonGson_withNSString_, gson, encoding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDroidconandroidNetworkGsonConverter)

@implementation CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput

- (instancetype)initWithByteArray:(IOSByteArray *)jsonBytes
                     withNSString:(NSString *)encode {
  CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(self, jsonBytes, encode);
  return self;
}

- (NSString *)fileName {
  return nil;
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return ((IOSByteArray *) nil_chk(jsonBytes_))->size_;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:jsonBytes_];
}

- (void)dealloc {
  RELEASE_(jsonBytes_);
  RELEASE_(mimeType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithByteArray:withNSString:);
  methods[1].selector = @selector(fileName);
  methods[2].selector = @selector(mimeType);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(writeToWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "jsonBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mimeType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLNSString;", "writeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "LCoTouchlabDroidconandroidNetworkGsonConverter;" };
  static const J2ObjcClassInfo _CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput = { "JsonTypedOutput", "co.touchlab.droidconandroid.network", ptrTable, methods, fields, 7, 0xa, 5, 2, 4, -1, -1, -1, -1 };
  return &_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput;
}

@end

void CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *self, IOSByteArray *jsonBytes, NSString *encode) {
  NSObject_init(self);
  JreStrongAssign(&self->jsonBytes_, jsonBytes);
  JreStrongAssign(&self->mimeType_, JreStrcat("$$", @"application/json; charset=", encode));
}

CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *new_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) {
  J2OBJC_NEW_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput, initWithByteArray_withNSString_, jsonBytes, encode)
}

CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput *create_CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) {
  J2OBJC_CREATE_IMPL(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput, initWithByteArray_withNSString_, jsonBytes, encode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDroidconandroidNetworkGsonConverter_JsonTypedOutput)
