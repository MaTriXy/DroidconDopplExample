//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/temp/DroidconAppSimple/lib/src/main/java/co/touchlab/droidconandroid/tasks/RemoveRsvpTask.java
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingEventbusEventBusExt.h"
#include "CoTouchlabAndroidThreadingTasksTask.h"
#include "CoTouchlabAndroidThreadingTasksTaskQueue.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "DCDDatabaseHelper.h"
#include "DCDEvent.h"
#include "DCTRemoveRsvpTask.h"
#include "DCTUpdateAlertsTask.h"
#include "DeGreenrobotEventEventBus.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Void.h"
#include "java/util/concurrent/Callable.h"

@interface DCTRemoveRsvpTask () {
 @public
  jlong eventId_;
}

@end

@interface DCTRemoveRsvpTask_$1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  DCTRemoveRsvpTask *this$0_;
  AndroidContentContext *val$context_;
}

- (id)call;

- (instancetype)initWithDCTRemoveRsvpTask:(DCTRemoveRsvpTask *)outer$
                withAndroidContentContext:(AndroidContentContext *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DCTRemoveRsvpTask_$1)

J2OBJC_FIELD_SETTER(DCTRemoveRsvpTask_$1, this$0_, DCTRemoveRsvpTask *)
J2OBJC_FIELD_SETTER(DCTRemoveRsvpTask_$1, val$context_, AndroidContentContext *)

__attribute__((unused)) static void DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask_$1 *self, DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0);

__attribute__((unused)) static DCTRemoveRsvpTask_$1 *new_DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DCTRemoveRsvpTask_$1 *create_DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0);

@implementation DCTRemoveRsvpTask

- (instancetype)initWithLong:(jlong)eventId {
  DCTRemoveRsvpTask_initWithLong_(self, eventId);
  return self;
}

- (void)runWithAndroidContentContext:(AndroidContentContext *)context {
  [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context))) performTransactionOrThrowRuntimeWithJavaUtilConcurrentCallable:create_DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(self, context)];
}

- (jboolean)handleErrorWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSException:(NSException *)e {
  return false;
}

- (void)onCompleteWithAndroidContentContext:(AndroidContentContext *)context {
  [((DeGreenrobotEventEventBus *) nil_chk(CoTouchlabAndroidThreadingEventbusEventBusExt_getDefault())) postWithId:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(runWithAndroidContentContext:);
  methods[2].selector = @selector(handleErrorWithAndroidContentContext:withNSException:);
  methods[3].selector = @selector(onCompleteWithAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "run", "LAndroidContentContext;", "LNSException;", "handleError", "LAndroidContentContext;LNSException;", "onComplete" };
  static const J2ObjcClassInfo _DCTRemoveRsvpTask = { "RemoveRsvpTask", "co.touchlab.droidconandroid.tasks", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_DCTRemoveRsvpTask;
}

@end

void DCTRemoveRsvpTask_initWithLong_(DCTRemoveRsvpTask *self, jlong eventId) {
  CoTouchlabAndroidThreadingTasksTask_init(self);
  self->eventId_ = eventId;
}

DCTRemoveRsvpTask *new_DCTRemoveRsvpTask_initWithLong_(jlong eventId) {
  J2OBJC_NEW_IMPL(DCTRemoveRsvpTask, initWithLong_, eventId)
}

DCTRemoveRsvpTask *create_DCTRemoveRsvpTask_initWithLong_(jlong eventId) {
  J2OBJC_CREATE_IMPL(DCTRemoveRsvpTask, initWithLong_, eventId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCTRemoveRsvpTask)

@implementation DCTRemoveRsvpTask_$1

- (id)call {
  id<CoTouchlabSqueakyDaoDao> dao = [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(val$context_))) getEventDao];
  DCDEvent *event = [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForIdWithId:JavaLangLong_valueOfWithLong_(this$0_->eventId_)];
  if (event != nil) {
    JreStrongAssign(&event->rsvpUuid_, nil);
    [dao updateWithId:event];
    [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_(val$context_))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTUpdateAlertsTask_init()];
  }
  return nil;
}

- (instancetype)initWithDCTRemoveRsvpTask:(DCTRemoveRsvpTask *)outer$
                withAndroidContentContext:(AndroidContentContext *)capture$0 {
  DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithDCTRemoveRsvpTask:withAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDCTRemoveRsvpTask;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LDCTRemoveRsvpTask;LAndroidContentContext;", "LDCTRemoveRsvpTask;", "runWithAndroidContentContext:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _DCTRemoveRsvpTask_$1 = { "", "co.touchlab.droidconandroid.tasks", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_DCTRemoveRsvpTask_$1;
}

@end

void DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask_$1 *self, DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$context_, capture$0);
  NSObject_init(self);
}

DCTRemoveRsvpTask_$1 *new_DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0) {
  J2OBJC_NEW_IMPL(DCTRemoveRsvpTask_$1, initWithDCTRemoveRsvpTask_withAndroidContentContext_, outer$, capture$0)
}

DCTRemoveRsvpTask_$1 *create_DCTRemoveRsvpTask_$1_initWithDCTRemoveRsvpTask_withAndroidContentContext_(DCTRemoveRsvpTask *outer$, AndroidContentContext *capture$0) {
  J2OBJC_CREATE_IMPL(DCTRemoveRsvpTask_$1, initWithDCTRemoveRsvpTask_withAndroidContentContext_, outer$, capture$0)
}
