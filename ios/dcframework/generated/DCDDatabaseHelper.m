//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "AndroidContentContext.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "CoTouchlabDroidconandroidSharedDataStaffEventAttendee.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl.h"
#include "CoTouchlabSqueakyDbSqliteSqueakyOpenHelper.h"
#include "CoTouchlabSqueakyTableTableUtils.h"
#include "DCDBlock.h"
#include "DCDDatabaseHelper.h"
#include "DCDEvent.h"
#include "DCDEventSpeaker.h"
#include "DCDUserAccount.h"
#include "DCDVenue.h"
#include "DCPAppManager.h"
#include "DCPPlatformClient.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Void.h"
#include "java/sql/SQLException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"

@interface DCDDatabaseHelper () {
 @public
  IOSObjectArray *tableClasses_;
}

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context;

@end

J2OBJC_FIELD_SETTER(DCDDatabaseHelper, tableClasses_, IOSObjectArray *)

inline NSString *DCDDatabaseHelper_get_DATABASE_FILE_NAME();
static NSString *DCDDatabaseHelper_DATABASE_FILE_NAME = @"droidcon";
J2OBJC_STATIC_FIELD_OBJ_FINAL(DCDDatabaseHelper, DATABASE_FILE_NAME, NSString *)

inline DCDDatabaseHelper *DCDDatabaseHelper_get_instance();
inline DCDDatabaseHelper *DCDDatabaseHelper_set_instance(DCDDatabaseHelper *value);
static DCDDatabaseHelper *DCDDatabaseHelper_instance;
J2OBJC_STATIC_FIELD_OBJ(DCDDatabaseHelper, instance, DCDDatabaseHelper *)

__attribute__((unused)) static void DCDDatabaseHelper_initWithAndroidContentContext_(DCDDatabaseHelper *self, AndroidContentContext *context);

__attribute__((unused)) static DCDDatabaseHelper *new_DCDDatabaseHelper_initWithAndroidContentContext_(AndroidContentContext *context) NS_RETURNS_RETAINED;

__attribute__((unused)) static DCDDatabaseHelper *create_DCDDatabaseHelper_initWithAndroidContentContext_(AndroidContentContext *context);

@implementation DCDDatabaseHelper

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context {
  DCDDatabaseHelper_initWithAndroidContentContext_(self, context);
  return self;
}

+ (DCDDatabaseHelper *)getInstanceWithAndroidContentContext:(AndroidContentContext *)context {
  return DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context);
}

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  @try {
    CoTouchlabSqueakyTableTableUtils_createTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(create_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(db), tableClasses_);
  }
  @catch (JavaSqlSQLException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
  @try {
    CoTouchlabSqueakyTableTableUtils_dropTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withBoolean_withIOSClassArray_(create_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(db), false, [IOSObjectArray arrayWithObjects:(id[]){ DCDEvent_class_() } count:1 type:IOSClass_class_()]);
    CoTouchlabSqueakyTableTableUtils_createTablesWithCoTouchlabSqueakyDbSQLiteDatabase_withIOSClassArray_(create_CoTouchlabSqueakyDbSqliteSQLiteDatabaseImpl_initWithAndroidDatabaseSqliteSQLiteDatabase_(db), [IOSObjectArray arrayWithObjects:(id[]){ DCDEvent_class_() } count:1 type:IOSClass_class_()]);
  }
  @catch (JavaSqlSQLException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)onOpenWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  [super onOpenWithAndroidDatabaseSqliteSQLiteDatabase:db];
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) execSQLWithNSString:@"PRAGMA foreign_keys=ON;"];
}

- (id<CoTouchlabSqueakyDaoDao>)getVenueDao {
  return [self getDaoWithIOSClass:DCDVenue_class_()];
}

- (id<CoTouchlabSqueakyDaoDao>)getEventDao {
  return [self getDaoWithIOSClass:DCDEvent_class_()];
}

- (id<CoTouchlabSqueakyDaoDao>)getUserAccountDao {
  return [self getDaoWithIOSClass:DCDUserAccount_class_()];
}

- (id<CoTouchlabSqueakyDaoDao>)getEventSpeakerDao {
  return [self getDaoWithIOSClass:DCDEventSpeaker_class_()];
}

- (id<CoTouchlabSqueakyDaoDao>)getBlockDao {
  return [self getDaoWithIOSClass:DCDBlock_class_()];
}

- (void)deleteEventsNotInWithJavaUtilSet:(id<JavaUtilSet>)goodStuff {
  id<CoTouchlabSqueakyDaoDao> eventDao = [self getEventDao];
  id<JavaUtilList> allEvents = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(eventDao)) queryForAll])) list];
  id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(allEvents)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    DCDEvent *event = [iterator next];
    if ([((id<JavaUtilSet>) nil_chk(goodStuff)) containsWithId:JavaLangLong_valueOfWithLong_(((DCDEvent *) nil_chk(event))->id__)]) [iterator remove];
  }
  if ([allEvents size] > 0) [eventDao delete__WithJavaUtilCollection:allEvents];
}

- (void)performTransactionOrThrowRuntimeWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)transaction {
  AndroidDatabaseSqliteSQLiteDatabase *db = [self getWritableDatabase];
  @try {
    [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) beginTransaction];
    [((id<JavaUtilConcurrentCallable>) nil_chk(transaction)) call];
    [db setTransactionSuccessful];
  }
  @catch (JavaLangException *e) {
    [((id<DCPPlatformClient>) nil_chk(DCPAppManager_getPlatformClient())) logExceptionWithNSException:e];
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  @finally {
    [db endTransaction];
  }
}

- (void)dealloc {
  RELEASE_(tableClasses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LDCDDatabaseHelper;", 0x29, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LCoTouchlabSqueakyDaoDao;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 14, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:);
  methods[1].selector = @selector(getInstanceWithAndroidContentContext:);
  methods[2].selector = @selector(onCreateWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[3].selector = @selector(onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onOpenWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[5].selector = @selector(getVenueDao);
  methods[6].selector = @selector(getEventDao);
  methods[7].selector = @selector(getUserAccountDao);
  methods[8].selector = @selector(getEventSpeakerDao);
  methods[9].selector = @selector(getBlockDao);
  methods[10].selector = @selector(deleteEventsNotInWithJavaUtilSet:);
  methods[11].selector = @selector(performTransactionOrThrowRuntimeWithJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATABASE_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "BASELINE", "I", .constantValue.asInt = DCDDatabaseHelper_BASELINE, 0x19, -1, -1, -1, -1 },
    { "instance", "LDCDDatabaseHelper;", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "tableClasses_", "[LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;", "getInstance", "onCreate", "LAndroidDatabaseSqliteSQLiteDatabase;", "onUpgrade", "LAndroidDatabaseSqliteSQLiteDatabase;II", "onOpen", "()Lco/touchlab/squeaky/dao/Dao<Lco/touchlab/droidconandroid/shared/data/Venue;>;", "()Lco/touchlab/squeaky/dao/Dao<Lco/touchlab/droidconandroid/shared/data/Event;>;", "()Lco/touchlab/squeaky/dao/Dao<Lco/touchlab/droidconandroid/shared/data/UserAccount;>;", "()Lco/touchlab/squeaky/dao/Dao<Lco/touchlab/droidconandroid/shared/data/EventSpeaker;>;", "()Lco/touchlab/squeaky/dao/Dao<Lco/touchlab/droidconandroid/shared/data/Block;>;", "deleteEventsNotIn", "LJavaUtilSet;", "LJavaSqlSQLException;", "(Ljava/util/Set<Ljava/lang/Long;>;)V", "performTransactionOrThrowRuntime", "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<Ljava/lang/Void;>;)V", &DCDDatabaseHelper_DATABASE_FILE_NAME, &DCDDatabaseHelper_instance };
  static const J2ObjcClassInfo _DCDDatabaseHelper = { "DatabaseHelper", "co.touchlab.droidconandroid.shared.data", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, -1, -1, -1, -1 };
  return &_DCDDatabaseHelper;
}

@end

void DCDDatabaseHelper_initWithAndroidContentContext_(DCDDatabaseHelper *self, AndroidContentContext *context) {
  CoTouchlabSqueakyDbSqliteSqueakyOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(self, context, DCDDatabaseHelper_DATABASE_FILE_NAME, nil, DCDDatabaseHelper_BASELINE);
  JreStrongAssignAndConsume(&self->tableClasses_, [IOSObjectArray newArrayWithObjects:(id[]){ DCDVenue_class_(), DCDEvent_class_(), DCDBlock_class_(), DCDUserAccount_class_(), CoTouchlabDroidconandroidSharedDataStaffEventAttendee_class_(), DCDEventSpeaker_class_() } count:6 type:IOSClass_class_()]);
}

DCDDatabaseHelper *new_DCDDatabaseHelper_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_NEW_IMPL(DCDDatabaseHelper, initWithAndroidContentContext_, context)
}

DCDDatabaseHelper *create_DCDDatabaseHelper_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_CREATE_IMPL(DCDDatabaseHelper, initWithAndroidContentContext_, context)
}

DCDDatabaseHelper *DCDDatabaseHelper_getInstanceWithAndroidContentContext_(AndroidContentContext *context) {
  DCDDatabaseHelper_initialize();
  @synchronized(DCDDatabaseHelper_class_()) {
    if (DCDDatabaseHelper_instance == nil) {
      JreStrongAssignAndConsume(&DCDDatabaseHelper_instance, new_DCDDatabaseHelper_initWithAndroidContentContext_(context));
    }
    return DCDDatabaseHelper_instance;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCDDatabaseHelper)
