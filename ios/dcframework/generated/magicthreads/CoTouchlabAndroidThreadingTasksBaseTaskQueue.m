//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/MagicThreads-doppl/library/src/main/java/co/touchlab/android/threading/tasks/BaseTaskQueue.java
//

#include "AndroidAppApplication.h"
#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "AndroidOsMessage.h"
#include "CoTouchlabAndroidThreadingTasksBaseTaskQueue.h"
#include "CoTouchlabAndroidThreadingTasksTask.h"
#include "CoTouchlabAndroidThreadingUtilsUiThreadContext.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/PriorityQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue () {
 @public
  CoTouchlabAndroidThreadingTasksTask *currentTask_;
  id<JavaUtilList> listeners_;
  jboolean startedCalled_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksBaseTaskQueue, currentTask_, CoTouchlabAndroidThreadingTasksTask *)
J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksBaseTaskQueue, listeners_, id<JavaUtilList>)

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper : NSObject

@end

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler () {
 @public
  CoTouchlabAndroidThreadingTasksBaseTaskQueue *this$0_;
}

- (instancetype)initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:(CoTouchlabAndroidThreadingTasksBaseTaskQueue *)outer$
                                                 withAndroidOsLooper:(AndroidOsLooper *)looper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler, this$0_, CoTouchlabAndroidThreadingTasksBaseTaskQueue *)

__attribute__((unused)) static void CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *self, CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper);

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper);

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery : NSObject

@end

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener : NSObject

@end

@interface CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 : NSObject < JavaUtilConcurrentThreadFactory >

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1)

__attribute__((unused)) static void CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init(CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *self);

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init();

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue

- (instancetype)initWithAndroidAppApplication:(AndroidAppApplication *)application
withCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper:(id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>)queueWrapper {
  CoTouchlabAndroidThreadingTasksBaseTaskQueue_initWithAndroidAppApplication_withCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper_(self, application, queueWrapper);
  return self;
}

- (jint)countTasks {
  return [((id<JavaUtilCollection>) nil_chk([((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(tasks_)) all])) size] + (currentTask_ == nil ? 0 : 1);
}

- (void)addListenerWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener:(id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>)listener {
  [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:listener];
}

- (void)clearListeners {
  [((id<JavaUtilList>) nil_chk(listeners_)) clear];
}

- (void)insertTaskWithCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread();
  [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(tasks_)) offerWithId:task];
  [self resetPollRunnable];
}

- (void)removeWithCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task {
  [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(tasks_)) removeWithId:task];
}

- (void)resetPollRunnable {
  [((AndroidOsHandler *) nil_chk(handler_)) removeMessagesWithInt:CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POLL_TASK];
  [handler_ sendMessageWithAndroidOsMessage:[handler_ obtainMessageWithInt:CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POLL_TASK]];
}

- (void)callQueueFinished {
  for (id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener> __strong listener in nil_chk(listeners_)) {
    [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>) nil_chk(listener)) queueFinishedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:self];
  }
  startedCalled_ = false;
}

- (CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState *)copyState {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread();
  JavaUtilPriorityQueue *commands = create_JavaUtilPriorityQueue_initWithJavaUtilCollection_([((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(tasks_)) all]);
  id<JavaUtilList> commandList = create_JavaUtilArrayList_init();
  while (![commands isEmpty]) {
    [commandList addWithId:[commands poll]];
  }
  return create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState_initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(commandList, currentTask_);
}

- (void)runTaskWithCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)finishTaskWithAndroidOsMessage:(AndroidOsMessage *)msg
withCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)otherOperationsWithAndroidOsMessage:(AndroidOsMessage *)msg {
}

- (void)queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery:(id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery>)queueQuery {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread();
  for (CoTouchlabAndroidThreadingTasksTask * __strong task in nil_chk([((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(tasks_)) all])) {
    [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery>) nil_chk(queueQuery)) queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:self withCoTouchlabAndroidThreadingTasksTask:task];
  }
  if (currentTask_ != nil) {
    [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery>) nil_chk(queueQuery)) queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:self withCoTouchlabAndroidThreadingTasksTask:currentTask_];
  }
}

- (void)dealloc {
  RELEASE_(application_);
  RELEASE_(handler_);
  RELEASE_(tasks_);
  RELEASE_(currentTask_);
  RELEASE_(executorService_);
  RELEASE_(listeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidAppApplication:withCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper:);
  methods[1].selector = @selector(countTasks);
  methods[2].selector = @selector(addListenerWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener:);
  methods[3].selector = @selector(clearListeners);
  methods[4].selector = @selector(insertTaskWithCoTouchlabAndroidThreadingTasksTask:);
  methods[5].selector = @selector(removeWithCoTouchlabAndroidThreadingTasksTask:);
  methods[6].selector = @selector(resetPollRunnable);
  methods[7].selector = @selector(callQueueFinished);
  methods[8].selector = @selector(copyState);
  methods[9].selector = @selector(runTaskWithCoTouchlabAndroidThreadingTasksTask:);
  methods[10].selector = @selector(finishTaskWithAndroidOsMessage:withCoTouchlabAndroidThreadingTasksTask:);
  methods[11].selector = @selector(otherOperationsWithAndroidOsMessage:);
  methods[12].selector = @selector(queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "application_", "LAndroidAppApplication;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "handler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "tasks_", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper;", .constantValue.asLong = 0, 0x14, -1, -1, 14, -1 },
    { "currentTask_", "LCoTouchlabAndroidThreadingTasksTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executorService_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "startedCalled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidAppApplication;LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper;", "(Landroid/app/Application;Lco/touchlab/android/threading/tasks/BaseTaskQueue$QueueWrapper<Lco/touchlab/android/threading/tasks/Task;>;)V", "addListener", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener;", "insertTask", "LCoTouchlabAndroidThreadingTasksTask;", "remove", "runTask", "finishTask", "LAndroidOsMessage;LCoTouchlabAndroidThreadingTasksTask;", "otherOperations", "LAndroidOsMessage;", "query", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery;", "Lco/touchlab/android/threading/tasks/BaseTaskQueue$QueueWrapper<Lco/touchlab/android/threading/tasks/Task;>;", "Ljava/util/List<Lco/touchlab/android/threading/tasks/BaseTaskQueue$QueueListener;>;", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper;LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler;LCoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState;LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery;LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue = { "BaseTaskQueue", "co.touchlab.android.threading.tasks", ptrTable, methods, fields, 7, 0x401, 13, 7, -1, 16, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue;
}

@end

void CoTouchlabAndroidThreadingTasksBaseTaskQueue_initWithAndroidAppApplication_withCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *self, AndroidAppApplication *application, id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper> queueWrapper) {
  NSObject_init(self);
  JreStrongAssign(&self->executorService_, JavaUtilConcurrentExecutors_newSingleThreadExecutorWithJavaUtilConcurrentThreadFactory_(create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init()));
  JreStrongAssignAndConsume(&self->listeners_, new_JavaUtilArrayList_init());
  self->startedCalled_ = false;
  JreStrongAssign(&self->application_, application);
  JreStrongAssign(&self->tasks_, queueWrapper);
  JreStrongAssignAndConsume(&self->handler_, new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(self, AndroidOsLooper_getMainLooper()));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x401, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x401, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x401, 5, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(poll);
  methods[1].selector = @selector(offerWithId:);
  methods[2].selector = @selector(all);
  methods[3].selector = @selector(removeWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "offer", "LNSObject;", "(TT;)V", "()Ljava/util/Collection<TT;>;", "remove", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper = { "QueueWrapper", "co.touchlab.android.threading.tasks", ptrTable, methods, NULL, 7, 0x60c, 4, 0, 6, -1, -1, 7, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler

- (instancetype)initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:(CoTouchlabAndroidThreadingTasksBaseTaskQueue *)outer$
                                                 withAndroidOsLooper:(AndroidOsLooper *)looper {
  CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(self, outer$, looper);
  return self;
}

- (void)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
  {
    CoTouchlabAndroidThreadingTasksTask *task;
    CoTouchlabAndroidThreadingTasksTask *tempTask;
    NSException *cause;
    switch (((AndroidOsMessage *) nil_chk(msg))->what_) {
      case CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_INSERT_TASK:
      [this$0_ insertTaskWithCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *) cast_chk(msg->obj_, [CoTouchlabAndroidThreadingTasksTask class])];
      break;
      case CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POLL_TASK:
      if (this$0_->currentTask_ != nil) {
        return;
      }
      task = [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper>) nil_chk(this$0_->tasks_)) poll];
      if (task != nil) {
        JreStrongAssign(&this$0_->currentTask_, task);
        if (!this$0_->startedCalled_) {
          this$0_->startedCalled_ = true;
          for (id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener> __strong listener in nil_chk(this$0_->listeners_)) {
            [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>) nil_chk(listener)) queueStartedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:this$0_];
          }
        }
        for (id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener> __strong listener in nil_chk(this$0_->listeners_)) {
          [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>) nil_chk(listener)) taskStartedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:this$0_ withCoTouchlabAndroidThreadingTasksTask:task];
        }
        [this$0_ runTaskWithCoTouchlabAndroidThreadingTasksTask:task];
      }
      else {
        [this$0_ callQueueFinished];
      }
      break;
      case CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POST_EXE:
      tempTask = this$0_->currentTask_;
      JreStrongAssign(&this$0_->currentTask_, nil);
      [this$0_ finishTaskWithAndroidOsMessage:msg withCoTouchlabAndroidThreadingTasksTask:tempTask];
      for (id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener> __strong listener in nil_chk(this$0_->listeners_)) {
        [((id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>) nil_chk(listener)) taskFinishedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:this$0_ withCoTouchlabAndroidThreadingTasksTask:tempTask];
      }
      break;
      case CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_THROW:
      cause = (NSException *) cast_chk(msg->obj_, [NSException class]);
      if ([cause isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) cast_chk(cause, [JavaLangRuntimeException class]);
      }
      else if ([cause isKindOfClass:[JavaLangError class]]) {
        @throw (JavaLangError *) cast_chk(cause, [JavaLangError class]);
      }
      else {
        @throw create_JavaLangRuntimeException_initWithNSException_(cause);
      }
      default:
      [this$0_ otherOperationsWithAndroidOsMessage:msg];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:withAndroidOsLooper:);
  methods[1].selector = @selector(handleMessageWithAndroidOsMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "INSERT_TASK", "I", .constantValue.asInt = CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_INSERT_TASK, 0x18, -1, -1, -1, -1 },
    { "POLL_TASK", "I", .constantValue.asInt = CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POLL_TASK, 0x18, -1, -1, -1, -1 },
    { "POST_EXE", "I", .constantValue.asInt = CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_POST_EXE, 0x19, -1, -1, -1, -1 },
    { "THROW", "I", .constantValue.asInt = CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_THROW, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;LAndroidOsLooper;", "handleMessage", "LAndroidOsMessage;", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler = { "QueueHandler", "co.touchlab.android.threading.tasks", ptrTable, methods, fields, 7, 0x4, 2, 5, 3, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler;
}

@end

void CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *self, CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidOsHandler_initWithAndroidOsLooper_(self, looper);
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper) {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler, initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_, outer$, looper)
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler *create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler_initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *outer$, AndroidOsLooper *looper) {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler, initWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withAndroidOsLooper_, outer$, looper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueHandler)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)queued
withCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)currentTask {
  CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState_initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(self, queued, currentTask);
  return self;
}

- (id<JavaUtilList>)getQueued {
  return queued_;
}

- (CoTouchlabAndroidThreadingTasksTask *)getCurrentTask {
  return currentTask_;
}

- (void)dealloc {
  RELEASE_(queued_);
  RELEASE_(currentTask_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksTask;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withCoTouchlabAndroidThreadingTasksTask:);
  methods[1].selector = @selector(getQueued);
  methods[2].selector = @selector(getCurrentTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queued_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "currentTask_", "LCoTouchlabAndroidThreadingTasksTask;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LCoTouchlabAndroidThreadingTasksTask;", "(Ljava/util/List<Lco/touchlab/android/threading/tasks/Task;>;Lco/touchlab/android/threading/tasks/Task;)V", "()Ljava/util/List<Lco/touchlab/android/threading/tasks/Task;>;", "Ljava/util/List<Lco/touchlab/android/threading/tasks/Task;>;", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState = { "TaskQueueState", "co.touchlab.android.threading.tasks", ptrTable, methods, fields, 7, 0x9, 3, 2, 4, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState;
}

@end

void CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState_initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState *self, id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask) {
  NSObject_init(self);
  JreStrongAssign(&self->queued_, queued);
  JreStrongAssign(&self->currentTask_, currentTask);
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState *new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState_initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask) {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState, initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_, queued, currentTask)
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState *create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState_initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask) {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState, initWithJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_, queued, currentTask)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue_TaskQueueState)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:withCoTouchlabAndroidThreadingTasksTask:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "query", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;LCoTouchlabAndroidThreadingTasksTask;", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery = { "QueueQuery", "co.touchlab.android.threading.tasks", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(queueStartedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:);
  methods[1].selector = @selector(queueFinishedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:);
  methods[2].selector = @selector(taskStartedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:withCoTouchlabAndroidThreadingTasksTask:);
  methods[3].selector = @selector(taskFinishedWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:withCoTouchlabAndroidThreadingTasksTask:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "queueStarted", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;", "queueFinished", "taskStarted", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;LCoTouchlabAndroidThreadingTasksTask;", "taskFinished" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener = { "QueueListener", "co.touchlab.android.threading.tasks", ptrTable, methods, NULL, 7, 0x609, 4, 0, 1, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener)

@implementation CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return create_JavaLangThread_initWithJavaLangRunnable_(r);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newThreadWithJavaLangRunnable:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 = { "", "co.touchlab.android.threading.tasks", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1;
}

@end

void CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init(CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *self) {
  NSObject_init(self);
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *new_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init() {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1, init)
}

CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1 *create_CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksBaseTaskQueue_$1, init)
}
