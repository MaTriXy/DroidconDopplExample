//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/MagicThreads-doppl/library/src/main/java/co/touchlab/android/threading/tasks/persisted/PersistedTaskQueueConfig.java
//

#include "AndroidContentContext.h"
#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "CoTouchlabAndroidThreadingTasksBaseTaskQueue.h"
#include "CoTouchlabAndroidThreadingTasksPersistedBusLog.h"
#include "CoTouchlabAndroidThreadingTasksPersistedBusLogImpl.h"
#include "CoTouchlabAndroidThreadingTasksPersistedCommandPersistenceProvider.h"
#include "CoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy.h"
#include "CoTouchlabAndroidThreadingTasksPersistedConfigException.h"
#include "CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig.h"
#include "CoTouchlabAndroidThreadingTasksPersistedPersistenceProvider.h"
#include "CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase.h"
#include "CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseFactory.h"
#include "CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseIntf.h"
#include "CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSimpleDatabaseHelper.h"
#include "CoTouchlabAndroidThreadingTasksPersistedTransientMethuselahCommandPurgePolicy.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig () {
 @public
  id<JavaUtilList> eventListeners_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig, eventListeners_, id<JavaUtilList>)

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder ()

- (void)checkState;

@end

__attribute__((unused)) static void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *self);

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory : NSObject < CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseFactory > {
 @public
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *sqLiteDatabase_;
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)database;

- (id<CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseIntf>)getDatabase;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory)

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory, sqLiteDatabase_, CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *)

__attribute__((unused)) static void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *self, AndroidDatabaseSqliteSQLiteDatabase *database);

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *database) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *database);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory)

NSString *CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_PERSISTED_QUEUE = @"PERSISTED_QUEUE";

@implementation CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<CoTouchlabAndroidThreadingTasksPersistedBusLog>)getLog {
  return log_;
}

- (id<CoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy>)getCommandPurgePolicy {
  return commandPurgePolicy_;
}

- (id<CoTouchlabAndroidThreadingTasksPersistedPersistenceProvider>)getPersistenceProvider {
  return persistenceProvider_;
}

- (id<JavaUtilList>)getEventListeners {
  return eventListeners_;
}

- (void)dealloc {
  RELEASE_(eventListeners_);
  RELEASE_(log_);
  RELEASE_(commandPurgePolicy_);
  RELEASE_(persistenceProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedBusLog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistenceProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLog);
  methods[2].selector = @selector(getCommandPurgePolicy);
  methods[3].selector = @selector(getPersistenceProvider);
  methods[4].selector = @selector(getEventListeners);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PERSISTED_QUEUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "eventListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "log_", "LCoTouchlabAndroidThreadingTasksPersistedBusLog;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "commandPurgePolicy_", "LCoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "persistenceProvider_", "LCoTouchlabAndroidThreadingTasksPersistedPersistenceProvider;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Lco/touchlab/android/threading/tasks/BaseTaskQueue$QueueListener;>;", &CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_PERSISTED_QUEUE, "Ljava/util/List<Lco/touchlab/android/threading/tasks/BaseTaskQueue$QueueListener;>;", "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig = { "PersistedTaskQueueConfig", "co.touchlab.android.threading.tasks.persisted", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, 3, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_init(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->eventListeners_, new_JavaUtilArrayList_init());
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_init() {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig, init)
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig)

@implementation CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)checkState {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *)addQueueListenerWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener:(id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener>)eventListener {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
  [((id<JavaUtilList>) nil_chk(((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->eventListeners_)) addWithId:eventListener];
  return self;
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *)setLogWithCoTouchlabAndroidThreadingTasksPersistedBusLog:(id<CoTouchlabAndroidThreadingTasksPersistedBusLog>)l {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
  JreStrongAssign(&((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->log_, l);
  return self;
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *)setCommandPurgePolicyWithCoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy:(id<CoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy>)p {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
  JreStrongAssign(&((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->commandPurgePolicy_, p);
  return self;
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *)setPersistenceProviderWithCoTouchlabAndroidThreadingTasksPersistedPersistenceProvider:(id<CoTouchlabAndroidThreadingTasksPersistedPersistenceProvider>)p {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
  JreStrongAssign(&((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->persistenceProvider_, p);
  return self;
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *)setDatabaseWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)database {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(self);
  JreStrongAssignAndConsume(&((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->persistenceProvider_, new_CoTouchlabAndroidThreadingTasksPersistedCommandPersistenceProvider_initWithCoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseFactory_(create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(database)));
  return self;
}

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *)buildWithAndroidContentContext:(AndroidContentContext *)context {
  if (((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->log_ == nil) {
    JreStrongAssignAndConsume(&config_->log_, new_CoTouchlabAndroidThreadingTasksPersistedBusLogImpl_init());
  }
  if (((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->commandPurgePolicy_ == nil) {
    JreStrongAssignAndConsume(&config_->commandPurgePolicy_, new_CoTouchlabAndroidThreadingTasksPersistedTransientMethuselahCommandPurgePolicy_init());
  }
  if (((CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *) nil_chk(config_))->persistenceProvider_ == nil) {
    JreStrongAssignAndConsume(&config_->persistenceProvider_, new_CoTouchlabAndroidThreadingTasksPersistedCommandPersistenceProvider_initWithCoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseFactory_(create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_([create_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSimpleDatabaseHelper_initWithAndroidContentContext_withNSString_(context, CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_PERSISTED_QUEUE) getWritableDatabase])));
  }
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *retConfig = config_;
  JreStrongAssign(&config_, nil);
  return retConfig;
}

- (void)dealloc {
  RELEASE_(config_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;", 0x1, 3, 4, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;", 0x1, 5, 6, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;", 0x1, 7, 8, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;", 0x1, 9, 10, 0, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;", 0x1, 11, 12, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkState);
  methods[2].selector = @selector(addQueueListenerWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener:);
  methods[3].selector = @selector(setLogWithCoTouchlabAndroidThreadingTasksPersistedBusLog:);
  methods[4].selector = @selector(setCommandPurgePolicyWithCoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy:);
  methods[5].selector = @selector(setPersistenceProviderWithCoTouchlabAndroidThreadingTasksPersistedPersistenceProvider:);
  methods[6].selector = @selector(setDatabaseWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[7].selector = @selector(buildWithAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "config_", "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LCoTouchlabAndroidThreadingTasksPersistedConfigException;", "addQueueListener", "LCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueListener;", "setLog", "LCoTouchlabAndroidThreadingTasksPersistedBusLog;", "setCommandPurgePolicy", "LCoTouchlabAndroidThreadingTasksPersistedCommandPurgePolicy;", "setPersistenceProvider", "LCoTouchlabAndroidThreadingTasksPersistedPersistenceProvider;", "setDatabase", "LAndroidDatabaseSqliteSQLiteDatabase;", "build", "LAndroidContentContext;", "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder = { "Builder", "co.touchlab.android.threading.tasks.persisted", ptrTable, methods, fields, 7, 0x9, 8, 1, 13, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_init(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->config_, new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_init());
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_init() {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder, init)
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder, init)
}

void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder_checkState(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder *self) {
  if (self->config_ == nil) {
    @throw create_CoTouchlabAndroidThreadingTasksPersistedConfigException_initWithNSString_(@"build already called");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_Builder)

@implementation CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)database {
  CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, database);
  return self;
}

- (id<CoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseIntf>)getDatabase {
  return sqLiteDatabase_;
}

- (void)dealloc {
  RELEASE_(sqLiteDatabase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabAndroidThreadingTasksPersistedStorageSqliteSQLiteDatabaseIntf;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(getDatabase);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sqLiteDatabase_", "LCoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "LCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory = { "LocalDatabaseFactory", "co.touchlab.android.threading.tasks.persisted", ptrTable, methods, fields, 7, 0x1a, 2, 1, 1, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *self, AndroidDatabaseSqliteSQLiteDatabase *database) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->sqLiteDatabase_, new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(database));
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *database) {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory, initWithAndroidDatabaseSqliteSQLiteDatabase_, database)
}

CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *database) {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory, initWithAndroidDatabaseSqliteSQLiteDatabase_, database)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_LocalDatabaseFactory)
