//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue")
#ifdef RESTRICT_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue
#define INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue 0
#else
#define INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue 1
#endif
#undef RESTRICT_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue

#if !defined (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_) && (INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue || defined(INCLUDE_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue))
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_

#define RESTRICT_CoTouchlabAndroidThreadingTasksBaseTaskQueue 1
#define INCLUDE_CoTouchlabAndroidThreadingTasksBaseTaskQueue 1
#include "CoTouchlabAndroidThreadingTasksBaseTaskQueue.h"

@class AndroidAppApplication;
@class AndroidOsMessage;
@class CoTouchlabAndroidThreadingTasksPersistedPersistedTask;
@class CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig;
@class CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState;
@class CoTouchlabAndroidThreadingTasksTask;
@protocol CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery;

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue : CoTouchlabAndroidThreadingTasksBaseTaskQueue

#pragma mark Public

- (instancetype)initWithAndroidAppApplication:(AndroidAppApplication *)appContext
withCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig:(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *)config;

- (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState *)copyPersistedState OBJC_METHOD_FAMILY_NONE;

- (void)executeWithCoTouchlabAndroidThreadingTasksPersistedPersistedTask:(CoTouchlabAndroidThreadingTasksPersistedPersistedTask *)task;

- (void)queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery:(id<CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery>)queueQuery;

- (void)restartQueue;

#pragma mark Protected

- (void)finishTaskWithAndroidOsMessage:(AndroidOsMessage *)msg
withCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task;

- (void)otherOperationsWithAndroidOsMessage:(AndroidOsMessage *)msg;

- (void)runTaskWithCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task;

@end

J2OBJC_STATIC_INIT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue)

inline NSString *CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_get_TAG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue, TAG, NSString *)

inline jint CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_get_START_PERSISTING_TASK();
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_START_PERSISTING_TASK 200
J2OBJC_STATIC_FIELD_CONSTANT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue, START_PERSISTING_TASK, jint)

inline jint CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_get_PERSIST_ALL_ADDING();
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PERSIST_ALL_ADDING 300
J2OBJC_STATIC_FIELD_CONSTANT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue, PERSIST_ALL_ADDING, jint)

inline jint CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_get_TRIGGER_PENDING();
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_TRIGGER_PENDING 400
J2OBJC_STATIC_FIELD_CONSTANT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue, TRIGGER_PENDING, jint)

FOUNDATION_EXPORT void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_initWithAndroidAppApplication_withCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue *self, AndroidAppApplication *appContext, CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *config);

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_initWithAndroidAppApplication_withCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_(AndroidAppApplication *appContext, CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_initWithAndroidAppApplication_withCoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig_(AndroidAppApplication *appContext, CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueueConfig *config);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue)

#endif

#if !defined (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper_) && (INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue || defined(INCLUDE_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper))
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper_

#define RESTRICT_CoTouchlabAndroidThreadingTasksBaseTaskQueue 1
#define INCLUDE_CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper 1
#include "CoTouchlabAndroidThreadingTasksBaseTaskQueue.h"

@class CoTouchlabAndroidThreadingTasksTask;
@protocol JavaUtilCollection;

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper : NSObject < CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueWrapper >

#pragma mark Public

- (id<JavaUtilCollection>)all;

- (void)offerWithId:(CoTouchlabAndroidThreadingTasksTask *)task;

- (CoTouchlabAndroidThreadingTasksTask *)poll;

- (void)removeWithId:(CoTouchlabAndroidThreadingTasksTask *)task;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper)

FOUNDATION_EXPORT void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper_init(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper *self);

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PriorityQueueWrapper)

#endif

#if !defined (CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState_) && (INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue || defined(INCLUDE_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState))
#define CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState_

@class CoTouchlabAndroidThreadingTasksTask;
@protocol JavaUtilList;

@interface CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState : NSObject {
 @public
  id<JavaUtilList> adding_;
  id<JavaUtilList> pending_;
  id<JavaUtilList> queued_;
  CoTouchlabAndroidThreadingTasksTask *currentTask_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)adding
                    withJavaUtilList:(id<JavaUtilList>)pending
                    withJavaUtilList:(id<JavaUtilList>)queued
withCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)currentTask;

- (id<JavaUtilList>)getAdding;

- (CoTouchlabAndroidThreadingTasksTask *)getCurrentTask;

- (id<JavaUtilList>)getPending;

- (id<JavaUtilList>)getQueued;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState)

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState, adding_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState, pending_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState, queued_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState, currentTask_, CoTouchlabAndroidThreadingTasksTask *)

FOUNDATION_EXPORT void CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState *self, id<JavaUtilList> adding, id<JavaUtilList> pending, id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask);

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState *new_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(id<JavaUtilList> adding, id<JavaUtilList> pending, id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState *create_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_withCoTouchlabAndroidThreadingTasksTask_(id<JavaUtilList> adding, id<JavaUtilList> pending, id<JavaUtilList> queued, CoTouchlabAndroidThreadingTasksTask *currentTask);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue_PersistedTaskQueueState)

#endif

#pragma pop_macro("INCLUDE_ALL_CoTouchlabAndroidThreadingTasksPersistedPersistedTaskQueue")
