//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/MagicThreads-doppl/library/src/main/java/co/touchlab/android/threading/utils/UiThreadContext.java
//

#include "AndroidOsLooper.h"
#include "CoTouchlabAndroidThreadingUtilsUiThreadContext.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"

@implementation CoTouchlabAndroidThreadingUtilsUiThreadContext

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assertUiThread {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread();
}

+ (jboolean)isInUiThread {
  return CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread();
}

+ (void)assertBackgroundThread {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertBackgroundThread();
}

+ (jboolean)isInIosUiThread {
  return CoTouchlabAndroidThreadingUtilsUiThreadContext_isInIosUiThread();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertUiThread);
  methods[2].selector = @selector(isInUiThread);
  methods[3].selector = @selector(assertBackgroundThread);
  methods[4].selector = @selector(isInIosUiThread);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingUtilsUiThreadContext = { "UiThreadContext", "co.touchlab.android.threading.utils", NULL, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingUtilsUiThreadContext;
}

@end

void CoTouchlabAndroidThreadingUtilsUiThreadContext_init(CoTouchlabAndroidThreadingUtilsUiThreadContext *self) {
  NSObject_init(self);
}

CoTouchlabAndroidThreadingUtilsUiThreadContext *new_CoTouchlabAndroidThreadingUtilsUiThreadContext_init() {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingUtilsUiThreadContext, init)
}

CoTouchlabAndroidThreadingUtilsUiThreadContext *create_CoTouchlabAndroidThreadingUtilsUiThreadContext_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingUtilsUiThreadContext, init)
}

void CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  if (!CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread()) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"This call must be in UI thread");
  }
}

jboolean CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  AndroidOsLooper *mainLooper = AndroidOsLooper_getMainLooper();
  if (mainLooper == nil) @throw create_JavaLangRuntimeException_initWithNSString_(@"Main looper not initialized");
  JavaLangThread *uiThread = [mainLooper getThread];
  JavaLangThread *currentThread = JavaLangThread_currentThread();
  return uiThread == currentThread;
}

void CoTouchlabAndroidThreadingUtilsUiThreadContext_assertBackgroundThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  if (CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread()) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"This call must be in background thread");
  }
}

jboolean CoTouchlabAndroidThreadingUtilsUiThreadContext_isInIosUiThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  return [NSThread isMainThread];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingUtilsUiThreadContext)
