//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/MagicThreads-doppl/library/src/main/java/co/touchlab/android/threading/tasks/persisted/BusLogImpl.java
//

#include "CoTouchlabAndroidThreadingTasksPersistedBusLogImpl.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"

@implementation CoTouchlabAndroidThreadingTasksPersistedBusLogImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingTasksPersistedBusLogImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg {
  return AndroidUtilLog_dWithNSString_withNSString_(tag, msg);
}

- (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
      withNSException:(NSException *)tr {
  return AndroidUtilLog_dWithNSString_withNSString_withNSException_(tag, msg, tr);
}

- (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg {
  return AndroidUtilLog_eWithNSString_withNSString_(tag, msg);
}

- (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
      withNSException:(NSException *)tr {
  return AndroidUtilLog_eWithNSString_withNSString_withNSException_(tag, msg, tr);
}

- (NSString *)getStackTraceStringWithNSException:(NSException *)tr {
  return AndroidUtilLog_getStackTraceStringWithNSException_(tr);
}

- (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg {
  return AndroidUtilLog_iWithNSString_withNSString_(tag, msg);
}

- (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
      withNSException:(NSException *)tr {
  return AndroidUtilLog_iWithNSString_withNSString_withNSException_(tag, msg, tr);
}

- (jboolean)isLoggableWithNSString:(NSString *)tag
                           withInt:(jint)level {
  return AndroidUtilLog_isLoggableWithNSString_withInt_(tag, level);
}

- (jint)printlnWithInt:(jint)priority
          withNSString:(NSString *)tag
          withNSString:(NSString *)msg {
  return AndroidUtilLog_printlnWithInt_withNSString_withNSString_(priority, tag, msg);
}

- (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg {
  return AndroidUtilLog_vWithNSString_withNSString_(tag, msg);
}

- (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
      withNSException:(NSException *)tr {
  return AndroidUtilLog_vWithNSString_withNSString_withNSException_(tag, msg, tr);
}

- (jint)wWithNSString:(NSString *)tag
      withNSException:(NSException *)tr {
  return AndroidUtilLog_wWithNSString_withNSException_(tag, tr);
}

- (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
      withNSException:(NSException *)tr {
  return AndroidUtilLog_wWithNSString_withNSString_withNSException_(tag, msg, tr);
}

- (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg {
  return AndroidUtilLog_wWithNSString_withNSString_(tag, msg);
}

- (void)logSoftExceptionWithNSString:(NSString *)tag
                        withNSString:(NSString *)message
                     withNSException:(NSException *)tr {
  AndroidUtilLog_eWithNSString_withNSString_withNSException_(tag, message, tr);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dWithNSString:withNSString:);
  methods[2].selector = @selector(dWithNSString:withNSString:withNSException:);
  methods[3].selector = @selector(eWithNSString:withNSString:);
  methods[4].selector = @selector(eWithNSString:withNSString:withNSException:);
  methods[5].selector = @selector(getStackTraceStringWithNSException:);
  methods[6].selector = @selector(iWithNSString:withNSString:);
  methods[7].selector = @selector(iWithNSString:withNSString:withNSException:);
  methods[8].selector = @selector(isLoggableWithNSString:withInt:);
  methods[9].selector = @selector(printlnWithInt:withNSString:withNSString:);
  methods[10].selector = @selector(vWithNSString:withNSString:);
  methods[11].selector = @selector(vWithNSString:withNSString:withNSException:);
  methods[12].selector = @selector(wWithNSString:withNSException:);
  methods[13].selector = @selector(wWithNSString:withNSString:withNSException:);
  methods[14].selector = @selector(wWithNSString:withNSString:);
  methods[15].selector = @selector(logSoftExceptionWithNSString:withNSString:withNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "d", "LNSString;LNSString;", "LNSString;LNSString;LNSException;", "e", "getStackTraceString", "LNSException;", "i", "isLoggable", "LNSString;I", "println", "ILNSString;LNSString;", "v", "w", "LNSString;LNSException;", "logSoftException" };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedBusLogImpl = { "BusLogImpl", "co.touchlab.android.threading.tasks.persisted", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabAndroidThreadingTasksPersistedBusLogImpl;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedBusLogImpl_init(CoTouchlabAndroidThreadingTasksPersistedBusLogImpl *self) {
  NSObject_init(self);
}

CoTouchlabAndroidThreadingTasksPersistedBusLogImpl *new_CoTouchlabAndroidThreadingTasksPersistedBusLogImpl_init() {
  J2OBJC_NEW_IMPL(CoTouchlabAndroidThreadingTasksPersistedBusLogImpl, init)
}

CoTouchlabAndroidThreadingTasksPersistedBusLogImpl *create_CoTouchlabAndroidThreadingTasksPersistedBusLogImpl_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabAndroidThreadingTasksPersistedBusLogImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedBusLogImpl)
