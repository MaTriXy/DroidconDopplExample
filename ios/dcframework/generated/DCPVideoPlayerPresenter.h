//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DCPVideoPlayerPresenter")
#ifdef RESTRICT_DCPVideoPlayerPresenter
#define INCLUDE_ALL_DCPVideoPlayerPresenter 0
#else
#define INCLUDE_ALL_DCPVideoPlayerPresenter 1
#endif
#undef RESTRICT_DCPVideoPlayerPresenter

#if !defined (DCPVideoPlayerPresenter_) && (INCLUDE_ALL_DCPVideoPlayerPresenter || defined(INCLUDE_DCPVideoPlayerPresenter))
#define DCPVideoPlayerPresenter_

#define RESTRICT_DCPAbstractEventBusPresenter 1
#define INCLUDE_DCPAbstractEventBusPresenter 1
#include "DCPAbstractEventBusPresenter.h"

@class AndroidContentContext;
@class DCTCheckWatchVideoTask;
@protocol DCPVideoPlayerHost;

@interface DCPVideoPlayerPresenter : DCPAbstractEventBusPresenter {
 @public
  __unsafe_unretained id<DCPVideoPlayerHost> host_;
  jint checkCount_;
}

#pragma mark Public

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                       withDCPVideoPlayerHost:(id<DCPVideoPlayerHost>)host
                                     withLong:(jlong)eventId;

- (void)onEventMainThreadWithDCTCheckWatchVideoTask:(DCTCheckWatchVideoTask *)task;

- (void)startChecking;

- (void)stopChecking;

- (void)unregister;

@end

J2OBJC_EMPTY_STATIC_INIT(DCPVideoPlayerPresenter)

FOUNDATION_EXPORT void DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(DCPVideoPlayerPresenter *self, AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId);

FOUNDATION_EXPORT DCPVideoPlayerPresenter *new_DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DCPVideoPlayerPresenter *create_DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId);

J2OBJC_TYPE_LITERAL_HEADER(DCPVideoPlayerPresenter)

@compatibility_alias CoTouchlabDroidconandroidSharedPresenterVideoPlayerPresenter DCPVideoPlayerPresenter;

#endif

#if !defined (DCPVideoPlayerPresenter_CheckVideoRunnable_) && (INCLUDE_ALL_DCPVideoPlayerPresenter || defined(INCLUDE_DCPVideoPlayerPresenter_CheckVideoRunnable))
#define DCPVideoPlayerPresenter_CheckVideoRunnable_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class DCPVideoPlayerPresenter;

@interface DCPVideoPlayerPresenter_CheckVideoRunnable : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithDCPVideoPlayerPresenter:(DCPVideoPlayerPresenter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(DCPVideoPlayerPresenter_CheckVideoRunnable)

FOUNDATION_EXPORT void DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter_CheckVideoRunnable *self, DCPVideoPlayerPresenter *outer$);

FOUNDATION_EXPORT DCPVideoPlayerPresenter_CheckVideoRunnable *new_DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DCPVideoPlayerPresenter_CheckVideoRunnable *create_DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(DCPVideoPlayerPresenter_CheckVideoRunnable)

#endif

#pragma pop_macro("INCLUDE_ALL_DCPVideoPlayerPresenter")
