//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/DroidconDopplExample/lib/src/main/java/co/touchlab/droidconandroid/presenter/VideoPlayerPresenter.java
//

#include "AndroidContentContext.h"
#include "AndroidOsHandler.h"
#include "CoTouchlabAndroidThreadingTasksTaskQueue.h"
#include "DCPAbstractEventBusPresenter.h"
#include "DCPVideoPlayerHost.h"
#include "DCPVideoPlayerPresenter.h"
#include "DCTCheckWatchVideoTask.h"
#include "J2ObjC_source.h"
#include "java/util/Random.h"

@interface DCPVideoPlayerPresenter () {
 @public
  AndroidOsHandler *handler_;
  jlong eventId_;
  DCPVideoPlayerPresenter_CheckVideoRunnable *checkVideoRunnable_;
}

- (void)checkWatchVideoDelayed;

@end

J2OBJC_FIELD_SETTER(DCPVideoPlayerPresenter, handler_, AndroidOsHandler *)
J2OBJC_FIELD_SETTER(DCPVideoPlayerPresenter, checkVideoRunnable_, DCPVideoPlayerPresenter_CheckVideoRunnable *)

__attribute__((unused)) static void DCPVideoPlayerPresenter_checkWatchVideoDelayed(DCPVideoPlayerPresenter *self);

@interface DCPVideoPlayerPresenter_CheckVideoRunnable () {
 @public
  DCPVideoPlayerPresenter *this$0_;
}

@end

J2OBJC_FIELD_SETTER(DCPVideoPlayerPresenter_CheckVideoRunnable, this$0_, DCPVideoPlayerPresenter *)

@implementation DCPVideoPlayerPresenter

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                       withDCPVideoPlayerHost:(id<DCPVideoPlayerHost>)host
                                     withLong:(jlong)eventId {
  DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(self, context, host, eventId);
  return self;
}

- (void)unregister {
  [self stopChecking];
  [super unregister];
}

- (void)onEventMainThreadWithDCTCheckWatchVideoTask:(DCTCheckWatchVideoTask *)task {
  if (((DCTCheckWatchVideoTask *) nil_chk(task))->videoOk_) {
    DCPVideoPlayerPresenter_checkWatchVideoDelayed(self);
  }
  else {
    [((id<DCPVideoPlayerHost>) nil_chk(host_)) shutDownForceWithNSString:@"Another device watching video"];
  }
}

- (void)checkWatchVideoDelayed {
  DCPVideoPlayerPresenter_checkWatchVideoDelayed(self);
}

- (void)stopChecking {
  [((AndroidOsHandler *) nil_chk(handler_)) removeCallbacksWithJavaLangRunnable:checkVideoRunnable_];
}

- (void)startChecking {
  [self stopChecking];
  DCPVideoPlayerPresenter_checkWatchVideoDelayed(self);
}

- (void)__javaClone:(DCPVideoPlayerPresenter *)original {
  [super __javaClone:original];
  [host_ release];
}

- (void)dealloc {
  RELEASE_(handler_);
  RELEASE_(checkVideoRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withDCPVideoPlayerHost:withLong:);
  methods[1].selector = @selector(unregister);
  methods[2].selector = @selector(onEventMainThreadWithDCTCheckWatchVideoTask:);
  methods[3].selector = @selector(checkWatchVideoDelayed);
  methods[4].selector = @selector(stopChecking);
  methods[5].selector = @selector(startChecking);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "host_", "LDCPVideoPlayerHost;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "handler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "checkCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "checkVideoRunnable_", "LDCPVideoPlayerPresenter_CheckVideoRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LDCPVideoPlayerHost;J", "onEventMainThread", "LDCTCheckWatchVideoTask;", "LDCPVideoPlayerPresenter_CheckVideoRunnable;" };
  static const J2ObjcClassInfo _DCPVideoPlayerPresenter = { "VideoPlayerPresenter", "co.touchlab.droidconandroid.presenter", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, 3, -1, -1, -1 };
  return &_DCPVideoPlayerPresenter;
}

@end

void DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(DCPVideoPlayerPresenter *self, AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId) {
  DCPAbstractEventBusPresenter_initWithAndroidContentContext_(self, context);
  JreStrongAssignAndConsume(&self->checkVideoRunnable_, new_DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(self));
  self->host_ = host;
  self->eventId_ = eventId;
  JreStrongAssignAndConsume(&self->handler_, new_AndroidOsHandler_init());
}

DCPVideoPlayerPresenter *new_DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId) {
  J2OBJC_NEW_IMPL(DCPVideoPlayerPresenter, initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_, context, host, eventId)
}

DCPVideoPlayerPresenter *create_DCPVideoPlayerPresenter_initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_(AndroidContentContext *context, id<DCPVideoPlayerHost> host, jlong eventId) {
  J2OBJC_CREATE_IMPL(DCPVideoPlayerPresenter, initWithAndroidContentContext_withDCPVideoPlayerHost_withLong_, context, host, eventId)
}

void DCPVideoPlayerPresenter_checkWatchVideoDelayed(DCPVideoPlayerPresenter *self) {
  jlong waitLength = 5 * 60 * 1000;
  if (self->checkCount_ == 0) {
    waitLength = ([create_JavaUtilRandom_init() nextIntWithInt:30] + 20) * 1000;
  }
  [((AndroidOsHandler *) nil_chk(self->handler_)) postDelayedWithJavaLangRunnable:self->checkVideoRunnable_ withLong:waitLength];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCPVideoPlayerPresenter)

@implementation DCPVideoPlayerPresenter_CheckVideoRunnable

- (void)run {
  [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueNetworkWithAndroidContentContext_([this$0_ getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTCheckWatchVideoTask_initWithLong_(this$0_->eventId_)];
  this$0_->checkCount_++;
}

- (instancetype)initWithDCPVideoPlayerPresenter:(DCPVideoPlayerPresenter *)outer$ {
  DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithDCPVideoPlayerPresenter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDCPVideoPlayerPresenter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDCPVideoPlayerPresenter;" };
  static const J2ObjcClassInfo _DCPVideoPlayerPresenter_CheckVideoRunnable = { "CheckVideoRunnable", "co.touchlab.droidconandroid.presenter", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_DCPVideoPlayerPresenter_CheckVideoRunnable;
}

@end

void DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter_CheckVideoRunnable *self, DCPVideoPlayerPresenter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

DCPVideoPlayerPresenter_CheckVideoRunnable *new_DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter *outer$) {
  J2OBJC_NEW_IMPL(DCPVideoPlayerPresenter_CheckVideoRunnable, initWithDCPVideoPlayerPresenter_, outer$)
}

DCPVideoPlayerPresenter_CheckVideoRunnable *create_DCPVideoPlayerPresenter_CheckVideoRunnable_initWithDCPVideoPlayerPresenter_(DCPVideoPlayerPresenter *outer$) {
  J2OBJC_CREATE_IMPL(DCPVideoPlayerPresenter_CheckVideoRunnable, initWithDCPVideoPlayerPresenter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCPVideoPlayerPresenter_CheckVideoRunnable)
