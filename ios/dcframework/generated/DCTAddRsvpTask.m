//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/temp/DroidconAppSimple/lib/src/main/java/co/touchlab/droidconandroid/tasks/AddRsvpTask.java
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingEventbusEventBusExt.h"
#include "CoTouchlabAndroidThreadingTasksTask.h"
#include "CoTouchlabAndroidThreadingTasksTaskQueue.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "DCDDatabaseHelper.h"
#include "DCDEvent.h"
#include "DCTAddRsvpTask.h"
#include "DCTUpdateAlertsTask.h"
#include "DeGreenrobotEventEventBus.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Void.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/Callable.h"

@interface DCTAddRsvpTask () {
 @public
  JavaLangLong *eventId_;
}

@end

J2OBJC_FIELD_SETTER(DCTAddRsvpTask, eventId_, JavaLangLong *)

@interface DCTAddRsvpTask_$1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  DCTAddRsvpTask *this$0_;
  AndroidContentContext *val$context_;
}

- (id)call;

- (instancetype)initWithDCTAddRsvpTask:(DCTAddRsvpTask *)outer$
             withAndroidContentContext:(AndroidContentContext *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DCTAddRsvpTask_$1)

J2OBJC_FIELD_SETTER(DCTAddRsvpTask_$1, this$0_, DCTAddRsvpTask *)
J2OBJC_FIELD_SETTER(DCTAddRsvpTask_$1, val$context_, AndroidContentContext *)

__attribute__((unused)) static void DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask_$1 *self, DCTAddRsvpTask *outer$, AndroidContentContext *capture$0);

__attribute__((unused)) static DCTAddRsvpTask_$1 *new_DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask *outer$, AndroidContentContext *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DCTAddRsvpTask_$1 *create_DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask *outer$, AndroidContentContext *capture$0);

@implementation DCTAddRsvpTask

- (instancetype)initWithJavaLangLong:(JavaLangLong *)eventId {
  DCTAddRsvpTask_initWithJavaLangLong_(self, eventId);
  return self;
}

- (void)runWithAndroidContentContext:(AndroidContentContext *)context {
  [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(context))) performTransactionOrThrowRuntimeWithJavaUtilConcurrentCallable:create_DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(self, context)];
}

- (jboolean)handleErrorWithAndroidContentContext:(AndroidContentContext *)context
                                 withNSException:(NSException *)e {
  return false;
}

- (void)onCompleteWithAndroidContentContext:(AndroidContentContext *)context {
  [((DeGreenrobotEventEventBus *) nil_chk(CoTouchlabAndroidThreadingEventbusEventBusExt_getDefault())) postWithId:self];
}

- (void)dealloc {
  RELEASE_(eventId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangLong:);
  methods[1].selector = @selector(runWithAndroidContentContext:);
  methods[2].selector = @selector(handleErrorWithAndroidContentContext:withNSException:);
  methods[3].selector = @selector(onCompleteWithAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventId_", "LJavaLangLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;", "run", "LAndroidContentContext;", "LNSException;", "handleError", "LAndroidContentContext;LNSException;", "onComplete" };
  static const J2ObjcClassInfo _DCTAddRsvpTask = { "AddRsvpTask", "co.touchlab.droidconandroid.tasks", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_DCTAddRsvpTask;
}

@end

void DCTAddRsvpTask_initWithJavaLangLong_(DCTAddRsvpTask *self, JavaLangLong *eventId) {
  CoTouchlabAndroidThreadingTasksTask_init(self);
  JreStrongAssign(&self->eventId_, eventId);
}

DCTAddRsvpTask *new_DCTAddRsvpTask_initWithJavaLangLong_(JavaLangLong *eventId) {
  J2OBJC_NEW_IMPL(DCTAddRsvpTask, initWithJavaLangLong_, eventId)
}

DCTAddRsvpTask *create_DCTAddRsvpTask_initWithJavaLangLong_(JavaLangLong *eventId) {
  J2OBJC_CREATE_IMPL(DCTAddRsvpTask, initWithJavaLangLong_, eventId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCTAddRsvpTask)

@implementation DCTAddRsvpTask_$1

- (id)call {
  id<CoTouchlabSqueakyDaoDao> dao = [((DCDDatabaseHelper *) nil_chk(DCDDatabaseHelper_getInstanceWithAndroidContentContext_(val$context_))) getEventDao];
  DCDEvent *event = [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForIdWithId:this$0_->eventId_];
  if (event != nil && event->rsvpUuid_ == nil) {
    NSString *uuid = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
    JreStrongAssign(&event->rsvpUuid_, uuid);
    [dao updateWithId:event];
    [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_(val$context_))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTUpdateAlertsTask_init()];
  }
  return nil;
}

- (instancetype)initWithDCTAddRsvpTask:(DCTAddRsvpTask *)outer$
             withAndroidContentContext:(AndroidContentContext *)capture$0 {
  DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithDCTAddRsvpTask:withAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LDCTAddRsvpTask;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LDCTAddRsvpTask;LAndroidContentContext;", "LDCTAddRsvpTask;", "runWithAndroidContentContext:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _DCTAddRsvpTask_$1 = { "", "co.touchlab.droidconandroid.tasks", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_DCTAddRsvpTask_$1;
}

@end

void DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask_$1 *self, DCTAddRsvpTask *outer$, AndroidContentContext *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$context_, capture$0);
  NSObject_init(self);
}

DCTAddRsvpTask_$1 *new_DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask *outer$, AndroidContentContext *capture$0) {
  J2OBJC_NEW_IMPL(DCTAddRsvpTask_$1, initWithDCTAddRsvpTask_withAndroidContentContext_, outer$, capture$0)
}

DCTAddRsvpTask_$1 *create_DCTAddRsvpTask_$1_initWithDCTAddRsvpTask_withAndroidContentContext_(DCTAddRsvpTask *outer$, AndroidContentContext *capture$0) {
  J2OBJC_CREATE_IMPL(DCTAddRsvpTask_$1, initWithDCTAddRsvpTask_withAndroidContentContext_, outer$, capture$0)
}
