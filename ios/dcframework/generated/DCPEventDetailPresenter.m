//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/DroidconDopplExample/lib/src/main/java/co/touchlab/droidconandroid/presenter/EventDetailPresenter.java
//

#include "AndroidContentContext.h"
#include "CoTouchlabAndroidThreadingTasksTaskQueue.h"
#include "CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper.h"
#include "CoTouchlabDroidconandroidUtilsAnalyticsEvents.h"
#include "CoTouchlabDroidconandroidUtilsSlackUtils.h"
#include "CoTouchlabDroidconandroidUtilsStringUtils.h"
#include "DCDAppPrefs.h"
#include "DCDEvent.h"
#include "DCDVenue.h"
#include "DCPAbstractEventBusPresenter.h"
#include "DCPAppManager.h"
#include "DCPEventDetailHost.h"
#include "DCPEventDetailPresenter.h"
#include "DCPPlatformClient.h"
#include "DCTAddRsvpTask.h"
#include "DCTEventDetailLoadTask.h"
#include "DCTEventVideoDetailsTask.h"
#include "DCTRemoveRsvpTask.h"
#include "DCTStartWatchVideoTask.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"

@interface DCPEventDetailPresenter () {
 @public
  jlong eventId_;
  __unsafe_unretained id<DCPEventDetailHost> host_;
  DCTEventDetailLoadTask *eventDetailLoadTask_;
  DCTEventVideoDetailsTask *eventVideoDetailsTask_;
}

- (void)recordAnalyticsWithNSString:(NSString *)analyticsKey;

- (jboolean)ready;

@end

J2OBJC_FIELD_SETTER(DCPEventDetailPresenter, eventDetailLoadTask_, DCTEventDetailLoadTask *)
J2OBJC_FIELD_SETTER(DCPEventDetailPresenter, eventVideoDetailsTask_, DCTEventVideoDetailsTask *)

__attribute__((unused)) static void DCPEventDetailPresenter_recordAnalyticsWithNSString_(DCPEventDetailPresenter *self, NSString *analyticsKey);

__attribute__((unused)) static jboolean DCPEventDetailPresenter_ready(DCPEventDetailPresenter *self);

@implementation DCPEventDetailPresenter

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                     withLong:(jlong)eventId
                       withDCPEventDetailHost:(id<DCPEventDetailHost>)host {
  DCPEventDetailPresenter_initWithAndroidContentContext_withLong_withDCPEventDetailHost_(self, context, eventId, host);
  return self;
}

- (void)refreshData {
  [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_([self getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTEventDetailLoadTask_initWithLong_(self->eventId_)];
}

- (void)callStartVideoWithNSString:(NSString *)link
                      withNSString:(NSString *)cover {
  DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, CoTouchlabDroidconandroidUtilsAnalyticsEvents_STREAM_CLICKED);
  [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueNetworkWithAndroidContentContext_([self getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTStartWatchVideoTask_initWithLong_withNSString_withNSString_(eventId_, link, cover)];
}

- (void)onEventMainThreadWithDCTEventDetailLoadTask:(DCTEventDetailLoadTask *)task {
  JreStrongAssign(&eventDetailLoadTask_, task);
  DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, CoTouchlabDroidconandroidUtilsAnalyticsEvents_OPEN_EVENT);
  [self refreshVideoData];
  [((id<DCPEventDetailHost>) nil_chk(host_)) dataRefresh];
}

- (void)recordAnalyticsWithNSString:(NSString *)analyticsKey {
  DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, analyticsKey);
}

- (void)refreshVideoData {
  [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueNetworkWithAndroidContentContext_([self getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTEventVideoDetailsTask_initWithLong_(eventId_)];
}

- (void)onEventMainThreadWithDCTEventVideoDetailsTask:(DCTEventVideoDetailsTask *)task {
  if ([((DCTEventVideoDetailsTask *) nil_chk(task)) getEventId] == eventId_) {
    JreStrongAssign(&eventVideoDetailsTask_, task);
    [((id<DCPEventDetailHost>) nil_chk(host_)) videoDataRefresh];
  }
}

- (void)onEventMainThreadWithDCTRemoveRsvpTask:(DCTRemoveRsvpTask *)task {
  [self refreshData];
}

- (void)onEventMainThreadWithDCTAddRsvpTask:(DCTAddRsvpTask *)task {
  [self refreshData];
}

- (void)onEventMainThreadWithDCTStartWatchVideoTask:(DCTStartWatchVideoTask *)task {
  [((id<DCPEventDetailHost>) nil_chk(host_)) resetStreamProgress];
  if (((DCTStartWatchVideoTask *) nil_chk(task))->videoOk_) {
    DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, CoTouchlabDroidconandroidUtilsAnalyticsEvents_STREAM_SUCCESS);
    [((id<DCPEventDetailHost>) nil_chk(host_)) callStreamActivityWithDCTStartWatchVideoTask:task];
  }
  else if (task->unauthorized_) {
    [((id<DCPEventDetailHost>) nil_chk(host_)) showTicketOptionsWithNSString:[((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_([self getContext]))) getEventbriteEmail] withNSString:task->link_ withNSString:task->cover_];
  }
  else {
    [((id<DCPEventDetailHost>) nil_chk(host_)) reportErrorWithNSString:@"Couldn't start video. Either server or network issue."];
  }
}

- (jboolean)isStreamStarting {
  return CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_hasTasksOfTypeWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withIOSClassArray_(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueNetworkWithAndroidContentContext_([self getContext]), [IOSObjectArray arrayWithObjects:(id[]){ DCTStartWatchVideoTask_class_() } count:1 type:IOSClass_class_()]);
}

- (jboolean)ready {
  return DCPEventDetailPresenter_ready(self);
}

- (DCTEventDetailLoadTask *)getEventDetailLoadTask {
  return eventDetailLoadTask_;
}

- (DCTEventVideoDetailsTask *)getEventVideoDetailsTask {
  return eventVideoDetailsTask_;
}

- (void)unregister {
  [super unregister];
  host_ = nil;
}

- (void)toggleRsvp {
  if (!DCPEventDetailPresenter_ready(self)) {
    return;
  }
  jlong eventId = ((DCDEvent *) nil_chk(((DCTEventDetailLoadTask *) nil_chk(eventDetailLoadTask_))->event_))->id__;
  if ([eventDetailLoadTask_->event_ isRsvped]) {
    [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_([self getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTRemoveRsvpTask_initWithLong_(eventId)];
    DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, CoTouchlabDroidconandroidUtilsAnalyticsEvents_UNRSVP_EVENT);
  }
  else {
    [((CoTouchlabAndroidThreadingTasksTaskQueue *) nil_chk(CoTouchlabAndroidThreadingTasksTaskQueue_loadQueueDefaultWithAndroidContentContext_([self getContext]))) executeWithCoTouchlabAndroidThreadingTasksTask:create_DCTAddRsvpTask_initWithJavaLangLong_(JavaLangLong_valueOfWithLong_(eventId))];
    DCPEventDetailPresenter_recordAnalyticsWithNSString_(self, CoTouchlabDroidconandroidUtilsAnalyticsEvents_RSVP_EVENT);
  }
}

- (void)setEventbriteEmailWithNSString:(NSString *)email
                          withNSString:(NSString *)link
                          withNSString:(NSString *)cover {
  [((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_([self getContext]))) setEventbriteEmailWithNSString:email];
  [self callStartVideoWithNSString:link withNSString:cover];
}

- (void)openSlack {
  NSString *slackLink = CoTouchlabDroidconandroidUtilsSlackUtils_createSlackLinkWithDCDVenue_(((DCDEvent *) nil_chk(((DCTEventDetailLoadTask *) nil_chk(eventDetailLoadTask_))->event_))->venue_);
  NSString *slackLinkHttp = CoTouchlabDroidconandroidUtilsSlackUtils_createSlackLinkHttpWithDCDVenue_(((DCDEvent *) nil_chk(((DCTEventDetailLoadTask *) nil_chk(eventDetailLoadTask_))->event_))->venue_);
  [((id<DCPEventDetailHost>) nil_chk(host_)) openSlackWithNSString:slackLink withNSString:slackLinkHttp withBoolean:[((DCDAppPrefs *) nil_chk(DCDAppPrefs_getInstanceWithAndroidContentContext_([self getContext]))) getShowSlackDialog]];
}

- (void)__javaClone:(DCPEventDetailPresenter *)original {
  [super __javaClone:original];
  [host_ release];
}

- (void)dealloc {
  RELEASE_(eventDetailLoadTask_);
  RELEASE_(eventVideoDetailsTask_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCTEventDetailLoadTask;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LDCTEventVideoDetailsTask;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithAndroidContentContext:withLong:withDCPEventDetailHost:);
  methods[1].selector = @selector(refreshData);
  methods[2].selector = @selector(callStartVideoWithNSString:withNSString:);
  methods[3].selector = @selector(onEventMainThreadWithDCTEventDetailLoadTask:);
  methods[4].selector = @selector(recordAnalyticsWithNSString:);
  methods[5].selector = @selector(refreshVideoData);
  methods[6].selector = @selector(onEventMainThreadWithDCTEventVideoDetailsTask:);
  methods[7].selector = @selector(onEventMainThreadWithDCTRemoveRsvpTask:);
  methods[8].selector = @selector(onEventMainThreadWithDCTAddRsvpTask:);
  methods[9].selector = @selector(onEventMainThreadWithDCTStartWatchVideoTask:);
  methods[10].selector = @selector(isStreamStarting);
  methods[11].selector = @selector(ready);
  methods[12].selector = @selector(getEventDetailLoadTask);
  methods[13].selector = @selector(getEventVideoDetailsTask);
  methods[14].selector = @selector(unregister);
  methods[15].selector = @selector(toggleRsvp);
  methods[16].selector = @selector(setEventbriteEmailWithNSString:withNSString:withNSString:);
  methods[17].selector = @selector(openSlack);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "host_", "LDCPEventDetailHost;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventDetailLoadTask_", "LDCTEventDetailLoadTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventVideoDetailsTask_", "LDCTEventVideoDetailsTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;JLDCPEventDetailHost;", "callStartVideo", "LNSString;LNSString;", "onEventMainThread", "LDCTEventDetailLoadTask;", "recordAnalytics", "LNSString;", "LDCTEventVideoDetailsTask;", "LDCTRemoveRsvpTask;", "LDCTAddRsvpTask;", "LDCTStartWatchVideoTask;", "setEventbriteEmail", "LNSString;LNSString;LNSString;" };
  static const J2ObjcClassInfo _DCPEventDetailPresenter = { "EventDetailPresenter", "co.touchlab.droidconandroid.presenter", ptrTable, methods, fields, 7, 0x1, 18, 4, -1, -1, -1, -1, -1 };
  return &_DCPEventDetailPresenter;
}

@end

void DCPEventDetailPresenter_initWithAndroidContentContext_withLong_withDCPEventDetailHost_(DCPEventDetailPresenter *self, AndroidContentContext *context, jlong eventId, id<DCPEventDetailHost> host) {
  DCPAbstractEventBusPresenter_initWithAndroidContentContext_(self, context);
  self->eventId_ = eventId;
  self->host_ = host;
}

DCPEventDetailPresenter *new_DCPEventDetailPresenter_initWithAndroidContentContext_withLong_withDCPEventDetailHost_(AndroidContentContext *context, jlong eventId, id<DCPEventDetailHost> host) {
  J2OBJC_NEW_IMPL(DCPEventDetailPresenter, initWithAndroidContentContext_withLong_withDCPEventDetailHost_, context, eventId, host)
}

DCPEventDetailPresenter *create_DCPEventDetailPresenter_initWithAndroidContentContext_withLong_withDCPEventDetailHost_(AndroidContentContext *context, jlong eventId, id<DCPEventDetailHost> host) {
  J2OBJC_CREATE_IMPL(DCPEventDetailPresenter, initWithAndroidContentContext_withLong_withDCPEventDetailHost_, context, eventId, host)
}

void DCPEventDetailPresenter_recordAnalyticsWithNSString_(DCPEventDetailPresenter *self, NSString *analyticsKey) {
  NSString *eventName = self->eventDetailLoadTask_ != nil && [self->eventDetailLoadTask_ getEvent] != nil ? CoTouchlabDroidconandroidUtilsStringUtils_trimToEmptyWithNSString_([((DCDEvent *) nil_chk([self->eventDetailLoadTask_ getEvent])) getName]) : @"";
  [((id<DCPPlatformClient>) nil_chk(DCPAppManager_getPlatformClient())) logEventWithNSString:analyticsKey withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabDroidconandroidUtilsAnalyticsEvents_PARAM_ITEM_ID, JavaLangLong_toStringWithLong_(self->eventId_), CoTouchlabDroidconandroidUtilsAnalyticsEvents_PARAM_ITEM_NAME, eventName } count:4 type:NSString_class_()]];
}

jboolean DCPEventDetailPresenter_ready(DCPEventDetailPresenter *self) {
  return self->eventDetailLoadTask_ != nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DCPEventDetailPresenter)
