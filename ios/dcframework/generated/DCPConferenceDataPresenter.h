//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/DroidconDopplExample/lib/src/main/java/co/touchlab/droidconandroid/presenter/ConferenceDataPresenter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DCPConferenceDataPresenter")
#ifdef RESTRICT_DCPConferenceDataPresenter
#define INCLUDE_ALL_DCPConferenceDataPresenter 0
#else
#define INCLUDE_ALL_DCPConferenceDataPresenter 1
#endif
#undef RESTRICT_DCPConferenceDataPresenter

#if !defined (DCPConferenceDataPresenter_) && (INCLUDE_ALL_DCPConferenceDataPresenter || defined(INCLUDE_DCPConferenceDataPresenter))
#define DCPConferenceDataPresenter_

#define RESTRICT_DCPAbstractEventBusPresenter 1
#define INCLUDE_DCPAbstractEventBusPresenter 1
#include "DCPAbstractEventBusPresenter.h"

@class AndroidContentContext;
@class CoTouchlabDroidconandroidTasksPersistedRefreshScheduleData;
@class DCDEvent;
@class DCPLoadConferenceDataTask;
@class DCPScheduleBlockHour;
@class DCTSeedScheduleDataTask;
@protocol DCPConferenceDataHost;
@protocol DCPConferenceDataPresenter_EventRow;
@protocol JavaUtilList;

@interface DCPConferenceDataPresenter : DCPAbstractEventBusPresenter

#pragma mark Public

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                    withDCPConferenceDataHost:(id<DCPConferenceDataHost>)conferenceDataHost
                                  withBoolean:(jboolean)allEvents;

- (NSString *)getSlackLink;

- (NSString *)getSlackLinkHttp;

+ (jboolean)hasConflictWithDCDEvent:(DCDEvent *)event
                   withJavaUtilList:(id<JavaUtilList>)dataSet;

- (void)onEventMainThreadWithDCPLoadConferenceDataTask:(DCPLoadConferenceDataTask *)task;

- (void)onEventMainThreadWithCoTouchlabDroidconandroidTasksPersistedRefreshScheduleData:(CoTouchlabDroidconandroidTasksPersistedRefreshScheduleData *)task;

- (void)onEventMainThreadWithDCTSeedScheduleDataTask:(DCTSeedScheduleDataTask *)task;

- (void)refreshConferenceData;

- (void)refreshFromServer;

- (jboolean)shouldShowSlackDialog;

+ (void)styleEventRowWithDCPScheduleBlockHour:(DCPScheduleBlockHour *)scheduleBlockHour
                             withJavaUtilList:(id<JavaUtilList>)dataSet
      withDCPConferenceDataPresenter_EventRow:(id<DCPConferenceDataPresenter_EventRow>)row
                                  withBoolean:(jboolean)allEvents;

@end

J2OBJC_EMPTY_STATIC_INIT(DCPConferenceDataPresenter)

inline jlong DCPConferenceDataPresenter_get_SERVER_REFRESH_TIME();
#define DCPConferenceDataPresenter_SERVER_REFRESH_TIME 21600000LL
J2OBJC_STATIC_FIELD_CONSTANT(DCPConferenceDataPresenter, SERVER_REFRESH_TIME, jlong)

FOUNDATION_EXPORT void DCPConferenceDataPresenter_initWithAndroidContentContext_withDCPConferenceDataHost_withBoolean_(DCPConferenceDataPresenter *self, AndroidContentContext *context, id<DCPConferenceDataHost> conferenceDataHost, jboolean allEvents);

FOUNDATION_EXPORT DCPConferenceDataPresenter *new_DCPConferenceDataPresenter_initWithAndroidContentContext_withDCPConferenceDataHost_withBoolean_(AndroidContentContext *context, id<DCPConferenceDataHost> conferenceDataHost, jboolean allEvents) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DCPConferenceDataPresenter *create_DCPConferenceDataPresenter_initWithAndroidContentContext_withDCPConferenceDataHost_withBoolean_(AndroidContentContext *context, id<DCPConferenceDataHost> conferenceDataHost, jboolean allEvents);

FOUNDATION_EXPORT void DCPConferenceDataPresenter_styleEventRowWithDCPScheduleBlockHour_withJavaUtilList_withDCPConferenceDataPresenter_EventRow_withBoolean_(DCPScheduleBlockHour *scheduleBlockHour, id<JavaUtilList> dataSet, id<DCPConferenceDataPresenter_EventRow> row, jboolean allEvents);

FOUNDATION_EXPORT jboolean DCPConferenceDataPresenter_hasConflictWithDCDEvent_withJavaUtilList_(DCDEvent *event, id<JavaUtilList> dataSet);

J2OBJC_TYPE_LITERAL_HEADER(DCPConferenceDataPresenter)

@compatibility_alias CoTouchlabDroidconandroidPresenterConferenceDataPresenter DCPConferenceDataPresenter;

#endif

#if !defined (DCPConferenceDataPresenter_EventRow_) && (INCLUDE_ALL_DCPConferenceDataPresenter || defined(INCLUDE_DCPConferenceDataPresenter_EventRow))
#define DCPConferenceDataPresenter_EventRow_

@protocol DCPConferenceDataPresenter_EventRow < JavaObject >

- (void)setTimeGapWithBoolean:(jboolean)b;

- (void)setTitleTextWithNSString:(NSString *)s;

- (void)setTimeTextWithNSString:(NSString *)s;

- (void)setDetailTextWithNSString:(NSString *)s;

- (void)setDescriptionWithNSString:(NSString *)s;

- (void)setLiveNowVisibleWithBoolean:(jboolean)b;

- (void)setRsvpVisibleWithBoolean:(jboolean)rsvp
                      withBoolean:(jboolean)past;

- (void)setRsvpConflictWithBoolean:(jboolean)b;

@end

J2OBJC_EMPTY_STATIC_INIT(DCPConferenceDataPresenter_EventRow)

J2OBJC_TYPE_LITERAL_HEADER(DCPConferenceDataPresenter_EventRow)

#endif

#pragma pop_macro("INCLUDE_ALL_DCPConferenceDataPresenter")
